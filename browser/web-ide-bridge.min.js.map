{"version":3,"file":"web-ide-bridge.min.js","mappings":"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","sources":["webpack://WebIdeBridge/./web-ide-bridge.js","webpack://WebIdeBridge/webpack/bootstrap","webpack://WebIdeBridge/webpack/startup"],"sourcesContent":["/**\n * Web-IDE-Bridge v1.0.4\n * Browser library for seamless IDE integration\n * \n * This is the development build with full debugging support.\n * For production, use web-ide-bridge.min.js\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.WebIdeBridge = factory());\n})(this, (function () { 'use strict';\n\n  /**\n   * Generate a UUID v4\n   */\n  function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Validate WebSocket server URL\n   */\n  function validateServerUrl(url) {\n    if (!url || typeof url !== 'string') {\n      return false;\n    }\n\n    try {\n      const urlObj = new URL(url);\n      return urlObj.protocol === 'ws:' || urlObj.protocol === 'wss:';\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Debounce function calls\n   */\n  function debounce(func, wait, immediate = false) {\n    let timeout;\n\n    return function executedFunction(...args) {\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(this, args);\n      };\n\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n\n      if (callNow) func.apply(this, args);\n    };\n  }\n\n  /**\n   * UI Manager for Web-IDE-Bridge\n   * Handles automatic button injection and UI interactions\n   */\n  class UIManager {\n    constructor(webIdeBridge) {\n      this.webIdeBridge = webIdeBridge;\n      this.injectedButtons = new Map();\n      this.observers = [];\n      this.styles = null;\n      this.initialized = false;\n    }\n\n    autoInjectButtons(options = {}) {\n      const defaultOptions = {\n        selector: 'textarea',\n        buttonText: 'Edit in IDE ↗',\n        buttonClass: 'web-ide-bridge-btn',\n        position: 'after',\n        fileTypeAttribute: 'data-language',\n        defaultFileType: 'txt',\n        excludeSelector: '.web-ide-bridge-exclude',\n        includeOnlySelector: null,\n        watchForChanges: true,\n        style: 'modern'\n      };\n\n      const config = { ...defaultOptions, ...options };\n\n      this._initializeStyles(config.style);\n      this._injectButtonsForSelector(config);\n\n      if (config.watchForChanges) {\n        this._watchForDOMChanges(config);\n      }\n\n      return {\n        refresh: () => this._injectButtonsForSelector(config),\n        destroy: () => this.removeAllButtons()\n      };\n    }\n\n    injectButton(textareaElement, options = {}) {\n      if (!textareaElement || textareaElement.tagName !== 'TEXTAREA') {\n        throw new Error('Element must be a textarea');\n      }\n\n      const defaultOptions = {\n        buttonText: 'Edit in IDE ↗',\n        buttonClass: 'web-ide-bridge-btn',\n        position: 'after',\n        fileType: 'txt',\n        style: 'modern'\n      };\n\n      const config = { ...defaultOptions, ...options };\n\n      this._initializeStyles(config.style);\n\n      if (!textareaElement.id) {\n        textareaElement.id = 'web-ide-bridge-textarea-' + generateUUID();\n      }\n\n      return this._createAndInjectButton(textareaElement, config);\n    }\n\n    removeAllButtons() {\n      this.injectedButtons.forEach(button => {\n        if (button.parentNode) {\n          button.parentNode.removeChild(button);\n        }\n      });\n      this.injectedButtons.clear();\n\n      this.observers.forEach(observer => observer.disconnect());\n      this.observers = [];\n\n      if (this.styles && this.styles.parentNode) {\n        this.styles.parentNode.removeChild(this.styles);\n        this.styles = null;\n      }\n    }\n\n    updateButtonStates(connected) {\n      this.injectedButtons.forEach(button => {\n        button.disabled = !connected;\n        // Always show the original text, do not change to 'Connect to Server First'\n        button.textContent = button.dataset.originalText;\n      });\n    }\n\n    _initializeStyles(style) {\n      if (this.styles || this.initialized) return;\n\n      const styleElement = document.createElement('style');\n      styleElement.id = 'web-ide-bridge-styles';\n\n      let css = '';\n\n      switch (style) {\n        case 'modern':\n          css = this._getModernButtonStyles();\n          break;\n        case 'minimal':\n          css = this._getMinimalButtonStyles();\n          break;\n        default:\n          css = this._getModernButtonStyles();\n      }\n\n      styleElement.textContent = css;\n      document.head.appendChild(styleElement);\n      this.styles = styleElement;\n      this.initialized = true;\n    }\n\n    _getModernButtonStyles() {\n      return `\n        .web-ide-bridge-btn {\n          background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\n          color: white;\n          border: none;\n          padding: 0.75rem 1.5rem;\n          border-radius: 8px;\n          font-weight: 600;\n          font-size: 0.875rem;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          display: inline-flex;\n          align-items: center;\n          gap: 0.5rem;\n          margin: 0.5rem 0;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          text-decoration: none;\n          outline: none;\n        }\n\n        .web-ide-bridge-btn:hover:not(:disabled) {\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n        }\n\n        .web-ide-bridge-btn:active:not(:disabled) {\n          transform: translateY(0);\n        }\n\n        .web-ide-bridge-btn:disabled {\n          background: #9ca3af;\n          cursor: not-allowed;\n          transform: none;\n          box-shadow: none;\n        }\n\n        .web-ide-bridge-btn:focus {\n          box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\n        }\n\n        .web-ide-bridge-container {\n          display: flex;\n          gap: 0.75rem;\n          align-items: center;\n          margin-top: 0.5rem;\n          flex-wrap: wrap;\n        }\n\n        .web-ide-bridge-file-type {\n          padding: 0.5rem;\n          border: 1px solid #d1d5db;\n          border-radius: 6px;\n          font-size: 0.875rem;\n          background: white;\n          color: #374151;\n        }\n      `;\n    }\n\n    _getMinimalButtonStyles() {\n      return `\n        .web-ide-bridge-btn {\n          background: #4f46e5;\n          color: white;\n          border: 1px solid #4f46e5;\n          padding: 0.5rem 1rem;\n          border-radius: 4px;\n          font-size: 0.875rem;\n          cursor: pointer;\n          transition: background-color 0.2s ease;\n          font-family: inherit;\n          outline: none;\n        }\n\n        .web-ide-bridge-btn:hover:not(:disabled) {\n          background: #4338ca;\n        }\n\n        .web-ide-bridge-btn:disabled {\n          background: #9ca3af;\n          border-color: #9ca3af;\n          cursor: not-allowed;\n        }\n\n        .web-ide-bridge-btn:focus {\n          box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.5);\n        }\n\n        .web-ide-bridge-container {\n          margin-top: 0.5rem;\n        }\n\n        .web-ide-bridge-file-type {\n          margin-left: 0.5rem;\n          padding: 0.25rem 0.5rem;\n          border: 1px solid #ccc;\n          border-radius: 3px;\n          font-size: 0.8rem;\n        }\n      `;\n    }\n\n    _injectButtonsForSelector(config) {\n      let elements = document.querySelectorAll(config.selector);\n\n      elements = Array.from(elements).filter(element => {\n        if (config.excludeSelector && element.matches(config.excludeSelector)) {\n          return false;\n        }\n        if (config.includeOnlySelector && !element.matches(config.includeOnlySelector)) {\n          return false;\n        }\n        return true;\n      });\n\n      elements.forEach(textarea => {\n        if (!textarea.id) {\n          textarea.id = 'web-ide-bridge-textarea-' + generateUUID();\n        }\n\n        if (this.injectedButtons.has(textarea.id)) {\n          return;\n        }\n\n        const fileType = textarea.getAttribute(config.fileTypeAttribute) || config.defaultFileType;\n\n        this._createAndInjectButton(textarea, {\n          ...config,\n          fileType\n        });\n      });\n    }\n\n    _createAndInjectButton(textarea, config) {\n      // Only add a single [Edit in IDE] button below each textarea, no type selector\n      const container = document.createElement('div');\n      container.className = 'web-ide-bridge-container';\n\n      const button = document.createElement('button');\n      button.className = config.buttonClass;\n      button.textContent = config.buttonText;\n      button.dataset.textareaId = textarea.id;\n      button.dataset.fileType = config.fileType;\n      button.dataset.originalText = config.buttonText;\n      button.disabled = !this.webIdeBridge.isConnected();\n\n      button.addEventListener('click', async () => {\n        if (!this.webIdeBridge.isConnected()) {\n          alert('Please connect to Web-IDE-Bridge server first');\n          return;\n        }\n        try {\n          const code = textarea.value;\n          const fileType = button.dataset.fileType;\n          await this.webIdeBridge.editCodeSnippet(textarea.id, code, fileType);\n        } catch (error) {\n          console.error('Failed to send code to IDE:', error);\n          alert('Failed to send code to IDE: ' + error.message);\n        }\n      });\n\n      container.appendChild(button);\n\n      switch (config.position) {\n        case 'before':\n          textarea.parentNode.insertBefore(container, textarea);\n          break;\n        case 'after':\n          textarea.parentNode.insertBefore(container, textarea.nextSibling);\n          break;\n        case 'append':\n          textarea.parentNode.appendChild(container);\n          break;\n        default:\n          textarea.parentNode.insertBefore(container, textarea.nextSibling);\n      }\n\n      this.injectedButtons.set(textarea.id, button);\n\n      this.webIdeBridge.onStatusChange((status) => {\n        this.updateButtonStates(status.serverConnected);\n      });\n\n      return button;\n    }\n\n    _watchForDOMChanges(config) {\n      const observer = new MutationObserver((mutations) => {\n        let shouldRefresh = false;\n\n        mutations.forEach((mutation) => {\n          if (mutation.type === 'childList') {\n            mutation.addedNodes.forEach((node) => {\n              if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.matches && node.matches(config.selector)) {\n                  shouldRefresh = true;\n                } else if (node.querySelector && node.querySelector(config.selector)) {\n                  shouldRefresh = true;\n                }\n              }\n            });\n          }\n        });\n\n        if (shouldRefresh) {\n          setTimeout(() => {\n            this._injectButtonsForSelector(config);\n          }, 100);\n        }\n      });\n\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n\n      this.observers.push(observer);\n    }\n  }\n\n  /**\n   * Web-IDE-Bridge Client Library\n   * Provides seamless integration between web applications and desktop IDEs\n   */\n  class WebIdeBridge {\n    constructor(userId, options = {}) {\n      if (!userId || typeof userId !== 'string') {\n        throw new Error('userId is required and must be a string');\n      }\n\n      this.userId = userId;\n      this.connectionId = options.connectionId || generateUUID();\n      this.options = {\n        serverUrl: 'ws://localhost:8071/web-ide-bridge/ws',\n        autoReconnect: true,\n        reconnectInterval: 5000,\n        maxReconnectAttempts: 10,\n        heartbeatInterval: 30000,\n        connectionTimeout: 10000,\n        debug: false,\n        addButtons: true, // new option\n        ...options\n      };\n\n      if (!validateServerUrl(this.options.serverUrl)) {\n        throw new Error('Invalid server URL format');\n      }\n\n      this.ws = null;\n      this.connected = false;\n      this.connecting = false;\n      this.reconnectAttempts = 0;\n      this.reconnectTimeout = null;\n      this.heartbeatTimeout = null;\n      this.connectionTimeout = null;\n      this.desktopConnected = false;\n\n      this.statusCallbacks = [];\n      this.codeUpdateCallbacks = [];\n      this.errorCallbacks = [];\n      this.messageCallbacks = [];\n\n      this.uiManager = new UIManager(this);\n      if (this.options.addButtons) {\n        this.uiManager.autoInjectButtons();\n      }\n      this.debouncedReconnect = debounce(this._attemptReconnect.bind(this), 1000);\n\n      this._log('WebIdeBridge initialized', { userId, connectionId: this.connectionId });\n    }\n\n    async connect() {\n      if (this.connected || this.connecting) {\n        this._log('Already connected or connecting');\n        return;\n      }\n\n      this.connecting = true;\n      this._updateStatus();\n\n      try {\n        await this._establishConnection();\n        this.reconnectAttempts = 0;\n        this._log('Successfully connected to server');\n      } catch (error) {\n        this.connecting = false;\n        this._handleConnectionError(error);\n        throw error;\n      }\n    }\n\n    disconnect() {\n      this._log('Disconnecting from server');\n\n      this._clearTimeouts();\n      this.options.autoReconnect = false;\n\n      if (this.ws) {\n        this.ws.close(1000, 'Client disconnect');\n        this.ws = null;\n      }\n\n      this.connected = false;\n      this.connecting = false;\n      this._updateStatus();\n    }\n\n    isConnected() {\n      return this.connected;\n    }\n\n    getConnectionState() {\n      if (this.connected) return 'connected';\n      if (this.connecting) return 'connecting';\n      return 'disconnected';\n    }\n\n    async editCodeSnippet(snippetId, code, fileType = 'txt') {\n      if (!this.connected) {\n        throw new Error('Not connected to server');\n      }\n\n      if (!snippetId || typeof snippetId !== 'string') {\n        throw new Error('snippetId is required and must be a string');\n      }\n\n      if (typeof code !== 'string') {\n        throw new Error('code must be a string');\n      }\n\n      const message = {\n        type: 'edit_request',\n        connectionId: this.connectionId,\n        userId: this.userId,\n        snippetId,\n        code,\n        fileType: fileType || 'txt',\n        timestamp: Date.now()\n      };\n\n      this._log('Sending edit request', { snippetId, fileType });\n      this._sendMessage(message);\n\n      // If addButtons is false, send info message to server\n      if (this.options.addButtons === false) {\n        this._sendMessage({\n          type: 'info',\n          connectionId: this.connectionId,\n          userId: this.userId,\n          payload: {\n            snippetId,\n            message: 'code has been updated in the web application'\n          }\n        });\n      }\n\n      return snippetId;\n    }\n\n    onStatusChange(callback) {\n      if (typeof callback !== 'function') {\n        throw new Error('Callback must be a function');\n      }\n      this.statusCallbacks.push(callback);\n      callback({\n        serverConnected: this.connected,\n        desktopConnected: this.desktopConnected\n      });\n    }\n\n    onCodeUpdate(callback) {\n      if (typeof callback !== 'function') {\n        throw new Error('Callback must be a function');\n      }\n      this.codeUpdateCallbacks.push(callback);\n    }\n\n    onError(callback) {\n      if (typeof callback !== 'function') {\n        throw new Error('Callback must be a function');\n      }\n      this.errorCallbacks.push(callback);\n    }\n\n    onMessage(callback) {\n      if (typeof callback !== 'function') {\n        throw new Error('Callback must be a function');\n      }\n      this.messageCallbacks.push(callback);\n    }\n\n    autoInjectButtons(options = {}) {\n      return this.uiManager.autoInjectButtons(options);\n    }\n\n    injectButton(textareaElement, options = {}) {\n      return this.uiManager.injectButton(textareaElement, options);\n    }\n\n    // Private methods\n\n    async _establishConnection() {\n      return new Promise((resolve, reject) => {\n        try {\n          this._log('Establishing WebSocket connection', { url: this.options.serverUrl });\n\n          this.ws = new WebSocket(this.options.serverUrl);\n\n          this.connectionTimeout = setTimeout(() => {\n            if (this.ws.readyState !== WebSocket.OPEN) {\n              this.ws.close();\n              reject(new Error('Connection timeout'));\n            }\n          }, this.options.connectionTimeout);\n\n          this.ws.onopen = () => {\n            clearTimeout(this.connectionTimeout);\n            this._log('WebSocket connection opened');\n            this._handleConnectionOpen();\n            resolve();\n          };\n\n          this.ws.onmessage = (event) => {\n            this._handleMessage(event);\n          };\n\n          this.ws.onclose = (event) => {\n            this._handleConnectionClose(event);\n          };\n\n          this.ws.onerror = (error) => {\n            clearTimeout(this.connectionTimeout);\n            this._log('WebSocket error', error);\n            reject(new Error('WebSocket connection failed'));\n          };\n\n        } catch (error) {\n          clearTimeout(this.connectionTimeout);\n          reject(error);\n        }\n      });\n    }\n\n    _handleConnectionOpen() {\n      this.connected = true;\n      this.connecting = false;\n      this._updateStatus();\n      // Send browser_connect immediately\n      const connectMessage = {\n        type: 'browser_connect',\n        connectionId: this.connectionId,\n        userId: this.userId,\n        timestamp: Date.now()\n      };\n      this._sendMessage(connectMessage);\n      this._startHeartbeat();\n    }\n\n    _handleConnectionClose(event) {\n      this._log('WebSocket connection closed', { code: event.code, reason: event.reason });\n\n      this.connected = false;\n      this.connecting = false;\n      this._clearTimeouts();\n      this._updateStatus();\n\n      if (this.options.autoReconnect && event.code !== 1000) {\n        this._scheduleReconnect();\n      }\n    }\n\n    _handleConnectionError(error) {\n      this._log('Connection error', error);\n      this._triggerErrorCallbacks(error.message || 'Connection failed');\n\n      if (this.options.autoReconnect) {\n        this._scheduleReconnect();\n      }\n    }\n\n    _handleMessage(event) {\n      try {\n        const message = JSON.parse(event.data);\n        this._log('Received message', message);\n\n        this.messageCallbacks.forEach(callback => {\n          try {\n            callback(message);\n          } catch (error) {\n            this._log('Error in message callback', error);\n          }\n        });\n\n        switch (message.type) {\n          case 'connection_init':\n            this._handleConnectionInit(message);\n            break;\n\n          case 'connection_ack':\n            this._log('Connection acknowledged by server');\n            break;\n\n          case 'code_update':\n            this._handleCodeUpdate(message);\n            break;\n\n          case 'pong':\n            this._log('Received pong from server');\n            break;\n\n          case 'error':\n            this._handleServerError(message);\n            break;\n\n          case 'status_update':\n            this._handleStatusUpdate(message);\n            break;\n\n          default:\n            this._log('Unknown message type', message.type);\n        }\n\n      } catch (error) {\n        this._log('Error parsing message', error);\n        this._log('Raw message data', event.data);\n        this._triggerErrorCallbacks('Failed to parse server message: ' + error.message);\n      }\n    }\n\n    _handleConnectionInit(message) {\n      if (message.connectionId) {\n        this.connectionId = message.connectionId;\n        this._log('Connection ID updated from server', this.connectionId);\n        // No need to send browser_connect here anymore\n        this._startHeartbeat();\n      }\n    }\n\n    _handleCodeUpdate(message) {\n      // Server sends flattened format (no payload wrapper)\n      if (!message.snippetId || !message.code) {\n        this._log('Invalid code update message', message);\n        return;\n      }\n\n      const { snippetId, code } = message;\n      this._log('Received code update', { snippetId, codeLength: code.length });\n      this._log('Number of code update callbacks:', this.codeUpdateCallbacks.length);\n\n      let callbackExecuted = false;\n      this.codeUpdateCallbacks.forEach(callback => {\n        try {\n          callbackExecuted = true;\n          const result = callback(snippetId, code);\n          this._log('Callback result:', { result, type: typeof result, hasContent: result?.trim() });\n          if (typeof result === 'string' && result.trim()) {\n            // Send info message to server\n            this._log('Sending info message from callback result');\n            this._sendMessage({\n              type: 'info',\n              connectionId: this.connectionId,\n              userId: this.userId,\n              payload: { snippetId, message: result.trim() }\n            });\n          }\n        } catch (error) {\n          this._log('Error in code update callback', error);\n        }\n      });\n\n      if (!callbackExecuted) {\n        this._log('No callbacks executed for snippet:', snippetId);\n      }\n\n      // If addButtons is true, send info message to server\n      if (this.options.addButtons !== false) {\n        this._log('Sending default info message (addButtons mode)');\n        this._sendMessage({\n          type: 'info',\n          connectionId: this.connectionId,\n          userId: this.userId,\n          payload: {\n            snippetId,\n            message: 'code has been updated in the web application'\n          }\n        });\n      }\n    }\n\n    _handleServerError(message) {\n      const errorMsg = message.payload?.message || 'Unknown server error';\n      this._log('Server error', errorMsg);\n      this._triggerErrorCallbacks(errorMsg);\n    }\n\n    _handleStatusUpdate(message) {\n      if (typeof message.desktopConnected === 'boolean') {\n        this.desktopConnected = message.desktopConnected;\n        this._updateStatus();\n      }\n    }\n\n    _sendMessage(message) {\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        throw new Error('WebSocket not connected');\n      }\n\n      try {\n        this.ws.send(JSON.stringify(message));\n        this._log('Sent message', message);\n      } catch (error) {\n        this._log('Error sending message', error);\n        throw new Error('Failed to send message to server');\n      }\n    }\n\n    _startHeartbeat() {\n      this._clearHeartbeat();\n\n      if (this.options.heartbeatInterval > 0) {\n        this.heartbeatTimeout = setTimeout(() => {\n          if (this.connected) {\n            try {\n              this._sendMessage({\n                type: 'ping',\n                connectionId: this.connectionId,\n                timestamp: Date.now()\n              });\n              this._startHeartbeat();\n            } catch (error) {\n              this._log('Heartbeat failed', error);\n            }\n          }\n        }, this.options.heartbeatInterval);\n      }\n    }\n\n    _clearHeartbeat() {\n      if (this.heartbeatTimeout) {\n        clearTimeout(this.heartbeatTimeout);\n        this.heartbeatTimeout = null;\n      }\n    }\n\n    _scheduleReconnect() {\n      if (this.reconnectAttempts >= this.options.maxReconnectAttempts) {\n        this._log('Max reconnect attempts reached');\n        this._triggerErrorCallbacks('Max reconnection attempts exceeded');\n        return;\n      }\n\n      const delay = Math.min(\n        this.options.reconnectInterval * Math.pow(2, this.reconnectAttempts),\n        30000\n      );\n\n      this._log(`Scheduling reconnect attempt ${this.reconnectAttempts + 1} in ${delay}ms`);\n\n      this.reconnectTimeout = setTimeout(() => {\n        this.debouncedReconnect();\n      }, delay);\n    }\n\n    async _attemptReconnect() {\n      if (this.connected || this.connecting) {\n        return;\n      }\n\n      this.reconnectAttempts++;\n      this._log(`Reconnect attempt ${this.reconnectAttempts}`);\n\n      try {\n        await this.connect();\n      } catch (error) {\n        this._log('Reconnect failed', error);\n        if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n          this._scheduleReconnect();\n        }\n      }\n    }\n\n    _clearTimeouts() {\n      if (this.reconnectTimeout) {\n        clearTimeout(this.reconnectTimeout);\n        this.reconnectTimeout = null;\n      }\n\n      if (this.connectionTimeout) {\n        clearTimeout(this.connectionTimeout);\n        this.connectionTimeout = null;\n      }\n\n      this._clearHeartbeat();\n    }\n\n    _updateStatus() {\n      this.statusCallbacks.forEach(callback => {\n        try {\n          callback({\n            serverConnected: this.connected,\n            desktopConnected: this.desktopConnected\n          });\n        } catch (error) {\n          this._log('Error in status callback', error);\n        }\n      });\n    }\n\n    _triggerErrorCallbacks(error) {\n      this.errorCallbacks.forEach(callback => {\n        try {\n          callback(error);\n        } catch (error) {\n          this._log('Error in error callback', error);\n        }\n      });\n    }\n\n    _log(message, data = null) {\n      if (this.options.debug) {\n        const logMessage = `[WebIdeBridge] ${message}`;\n        if (data) {\n          console.log(logMessage, data);\n        } else {\n          console.log(logMessage);\n        }\n      }\n    }\n  }\n\n  return WebIdeBridge;\n\n}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(980);\n"],"names":["module","exports","generateUUID","replace","c","r","Math","random","toString","validateServerUrl","url","urlObj","URL","protocol","debounce","func","wait","immediate","timeout","args","later","apply","this","callNow","clearTimeout","setTimeout","UIManager","constructor","webIdeBridge","injectedButtons","Map","observers","styles","initialized","autoInjectButtons","options","config","selector","buttonText","buttonClass","position","fileTypeAttribute","defaultFileType","excludeSelector","includeOnlySelector","watchForChanges","style","_initializeStyles","_injectButtonsForSelector","_watchForDOMChanges","refresh","destroy","removeAllButtons","injectButton","textareaElement","tagName","Error","fileType","id","_createAndInjectButton","forEach","button","parentNode","removeChild","clear","observer","disconnect","updateButtonStates","connected","disabled","textContent","dataset","originalText","styleElement","document","createElement","css","_getModernButtonStyles","_getMinimalButtonStyles","head","appendChild","elements","querySelectorAll","Array","from","filter","element","matches","textarea","has","getAttribute","container","className","textareaId","isConnected","addEventListener","async","code","value","editCodeSnippet","error","alert","message","insertBefore","nextSibling","set","onStatusChange","status","serverConnected","MutationObserver","mutations","shouldRefresh","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","querySelector","observe","body","childList","subtree","push","WebIdeBridge","userId","connectionId","serverUrl","autoReconnect","reconnectInterval","maxReconnectAttempts","heartbeatInterval","connectionTimeout","debug","addButtons","ws","connecting","reconnectAttempts","reconnectTimeout","heartbeatTimeout","desktopConnected","statusCallbacks","codeUpdateCallbacks","errorCallbacks","messageCallbacks","uiManager","debouncedReconnect","_attemptReconnect","bind","_log","connect","_updateStatus","_establishConnection","_handleConnectionError","_clearTimeouts","close","getConnectionState","snippetId","timestamp","Date","now","_sendMessage","payload","callback","onCodeUpdate","onError","onMessage","Promise","resolve","reject","WebSocket","readyState","OPEN","onopen","_handleConnectionOpen","onmessage","event","_handleMessage","onclose","_handleConnectionClose","onerror","connectMessage","_startHeartbeat","reason","_scheduleReconnect","_triggerErrorCallbacks","JSON","parse","data","_handleConnectionInit","_handleCodeUpdate","_handleServerError","_handleStatusUpdate","codeLength","length","callbackExecuted","result","hasContent","trim","errorMsg","send","stringify","_clearHeartbeat","delay","min","pow","factory","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}