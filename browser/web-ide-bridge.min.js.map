{"version":3,"file":"web-ide-bridge.min.js","mappings":"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","sources":["webpack://WebIdeBridge/webpack/bootstrap","webpack://WebIdeBridge/webpack/runtime/define property getters","webpack://WebIdeBridge/webpack/runtime/hasOwnProperty shorthand","webpack://WebIdeBridge/./src/utils.js","webpack://WebIdeBridge/./src/ui.js","webpack://WebIdeBridge/./src/client.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Utility functions for Web-IDE-Bridge browser library\n */\n\n/**\n * Generate a UUID v4\n */\nexport function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Validate WebSocket server URL\n   */\n  export function validateServerUrl(url) {\n    if (!url || typeof url !== 'string') {\n      return false;\n    }\n\n    try {\n      const urlObj = new URL(url);\n      return urlObj.protocol === 'ws:' || urlObj.protocol === 'wss:';\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Debounce function calls\n   */\n  export function debounce(func, wait, immediate = false) {\n    let timeout;\n\n    return function executedFunction(...args) {\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(this, args);\n      };\n\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n\n      if (callNow) func.apply(this, args);\n    };\n  }\n\n  /**\n   * Throttle function calls\n   */\n  export function throttle(func, limit) {\n    let inThrottle;\n\n    return function executedFunction(...args) {\n      if (!inThrottle) {\n        func.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Deep clone an object\n   */\n  export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (obj instanceof Date) {\n      return new Date(obj.getTime());\n    }\n\n    if (obj instanceof Array) {\n      return obj.map(item => deepClone(item));\n    }\n\n    if (typeof obj === 'object') {\n      const clonedObj = {};\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          clonedObj[key] = deepClone(obj[key]);\n        }\n      }\n      return clonedObj;\n    }\n  }\n\n  /**\n   * Escape HTML entities\n   */\n  export function escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Parse file type from filename or extension\n   */\n  export function parseFileType(filename) {\n    if (!filename || typeof filename !== 'string') {\n      return 'txt';\n    }\n\n    const extension = filename.split('.').pop().toLowerCase();\n\n    const typeMap = {\n      'js': 'js',\n      'jsx': 'jsx',\n      'ts': 'ts',\n      'tsx': 'tsx',\n      'css': 'css',\n      'scss': 'scss',\n      'sass': 'scss',\n      'less': 'less',\n      'html': 'html',\n      'htm': 'html',\n      'xml': 'xml',\n      'json': 'json',\n      'yaml': 'yaml',\n      'yml': 'yaml',\n      'py': 'py',\n      'python': 'py',\n      'java': 'java',\n      'cpp': 'cpp',\n      'cc': 'cpp',\n      'cxx': 'cpp',\n      'c': 'c',\n      'h': 'c',\n      'php': 'php',\n      'rb': 'rb',\n      'ruby': 'rb',\n      'go': 'go',\n      'rs': 'rs',\n      'rust': 'rs',\n      'sh': 'sh',\n      'bash': 'sh',\n      'zsh': 'sh',\n      'sql': 'sql',\n      'md': 'md',\n      'markdown': 'md',\n      'txt': 'txt',\n      'text': 'txt'\n    };\n\n    return typeMap[extension] || 'txt';\n  }\n\n  /**\n   * Format file size in human readable format\n   */\n  export function formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  }\n\n  /**\n   * Get language name from file type\n   */\n  export function getLanguageName(fileType) {\n    const languageMap = {\n      'js': 'JavaScript',\n      'jsx': 'React JSX',\n      'ts': 'TypeScript',\n      'tsx': 'React TSX',\n      'css': 'CSS',\n      'scss': 'SCSS',\n      'less': 'Less',\n      'html': 'HTML',\n      'xml': 'XML',\n      'json': 'JSON',\n      'yaml': 'YAML',\n      'py': 'Python',\n      'java': 'Java',\n      'cpp': 'C++',\n      'c': 'C',\n      'php': 'PHP',\n      'rb': 'Ruby',\n      'go': 'Go',\n      'rs': 'Rust',\n      'sh': 'Shell',\n      'sql': 'SQL',\n      'md': 'Markdown',\n      'txt': 'Plain Text'\n    };\n\n    return languageMap[fileType] || 'Unknown';\n  }\n\n  /**\n   * Check if the current environment supports WebSockets\n   */\n  export function isWebSocketSupported() {\n    return typeof WebSocket !== 'undefined';\n  }\n\n  /**\n   * Get browser information\n   */\n  export function getBrowserInfo() {\n    const userAgent = navigator.userAgent;\n    let browser = 'Unknown';\n    let version = 'Unknown';\n\n    if (userAgent.indexOf('Chrome') > -1) {\n      browser = 'Chrome';\n      version = userAgent.match(/Chrome\\/(\\d+)/)?.[1] || 'Unknown';\n    } else if (userAgent.indexOf('Firefox') > -1) {\n      browser = 'Firefox';\n      version = userAgent.match(/Firefox\\/(\\d+)/)?.[1] || 'Unknown';\n    } else if (userAgent.indexOf('Safari') > -1) {\n      browser = 'Safari';\n      version = userAgent.match(/Safari\\/(\\d+)/)?.[1] || 'Unknown';\n    } else if (userAgent.indexOf('Edge') > -1) {\n      browser = 'Edge';\n      version = userAgent.match(/Edge\\/(\\d+)/)?.[1] || 'Unknown';\n    }\n\n    return { browser, version, userAgent };\n  }\n\n  /**\n   * Simple localStorage wrapper with error handling\n   */\n  export const storage = {\n    get(key, defaultValue = null) {\n      try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : defaultValue;\n      } catch {\n        return defaultValue;\n      }\n    },\n\n    set(key, value) {\n      try {\n        localStorage.setItem(key, JSON.stringify(value));\n        return true;\n      } catch {\n        return false;\n      }\n    },\n\n    remove(key) {\n      try {\n        localStorage.removeItem(key);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n\n    clear() {\n      try {\n        localStorage.clear();\n        return true;\n      } catch {\n        return false;\n      }\n    }\n  };\n\n  /**\n   * Create a promise that resolves after a delay\n   */\n  export function delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Retry a function with exponential backoff\n   */\n  export async function retry(fn, options = {}) {\n    const {\n      retries = 3,\n      delay: baseDelay = 1000,\n      factor = 2,\n      maxDelay = 10000\n    } = options;\n\n    let lastError;\n\n    for (let i = 0; i <= retries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n\n        if (i === retries) {\n          throw lastError;\n        }\n\n        const delayMs = Math.min(baseDelay * Math.pow(factor, i), maxDelay);\n        await delay(delayMs);\n      }\n    }\n  }\n\n  /**\n   * Check if a value is a valid UUID\n   */\n  export function isValidUUID(uuid) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  }\n\n  /**\n   * Safe JSON parse with error handling\n   */\n  export function safeJsonParse(jsonString, defaultValue = null) {\n    try {\n      return JSON.parse(jsonString);\n    } catch {\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Safe JSON stringify with error handling\n   */\n  export function safeJsonStringify(obj, defaultValue = '{}') {\n    try {\n      return JSON.stringify(obj);\n    } catch {\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Create a cancellable promise\n   */\n  export function createCancellablePromise(promise) {\n    let cancelled = false;\n\n    const cancellablePromise = new Promise((resolve, reject) => {\n      promise.then(\n        value => cancelled ? reject(new Error('Promise cancelled')) : resolve(value),\n        error => cancelled ? reject(new Error('Promise cancelled')) : reject(error)\n      );\n    });\n\n    cancellablePromise.cancel = () => {\n      cancelled = true;\n    };\n\n    return cancellablePromise;\n  }\n","import { generateUUID } from './utils.js';\n\n/**\n * UI Manager for Web-IDE-Bridge\n * Handles automatic button injection and UI interactions\n */\nexport class UIManager {\n  constructor(webIdeBridge) {\n    this.webIdeBridge = webIdeBridge;\n    this.injectedButtons = new Map(); // textareaId -> button element\n    this.observers = [];\n    this.styles = null;\n    this.initialized = false;\n    this.statusCallbackRegistered = false; // Track if we've already registered status callback\n  }\n\n  /**\n   * Auto-inject \"Edit in IDE\" buttons for textareas\n   */\n  autoInjectButtons(options = {}) {\n    const defaultOptions = {\n      selector: 'textarea',\n      buttonText: 'Edit in IDE ↗',\n      buttonClass: 'web-ide-bridge-btn',\n      position: 'after', // 'after', 'before', 'append'\n      fileTypeAttribute: 'data-type',\n      defaultFileType: 'txt',\n      excludeSelector: '.web-ide-bridge-exclude',\n      includeOnlySelector: null,\n      watchForChanges: true,\n      style: 'modern', // 'modern', 'minimal', 'custom'\n      showFileTypeSelector: false // Disable file type selectors\n    };\n\n    const config = { ...defaultOptions, ...options };\n\n    this._initializeStyles(config.style);\n    this._injectButtonsForSelector(config);\n\n    if (config.watchForChanges) {\n      this._watchForDOMChanges(config);\n    }\n\n    return {\n      refresh: () => this._injectButtonsForSelector(config),\n      destroy: () => this.removeAllButtons()\n    };\n  }\n\n  /**\n   * Manually inject button for specific textarea\n   */\n  injectButton(textareaElement, options = {}) {\n    if (!textareaElement || textareaElement.tagName !== 'TEXTAREA') {\n      throw new Error('Element must be a textarea');\n    }\n\n    const defaultOptions = {\n      buttonText: 'Edit in IDE ↗',\n      buttonClass: 'web-ide-bridge-btn',\n      position: 'after',\n      fileType: 'txt',\n      style: 'modern'\n    };\n\n    const config = { ...defaultOptions, ...options };\n\n    this._initializeStyles(config.style);\n\n    // Generate ID if textarea doesn't have one\n    if (!textareaElement.id) {\n      textareaElement.id = 'web-ide-bridge-textarea-' + generateUUID();\n    }\n\n    return this._createAndInjectButton(textareaElement, config);\n  }\n\n  /**\n   * Remove all injected buttons\n   */\n  removeAllButtons() {\n    this.injectedButtons.forEach(button => {\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n    });\n    this.injectedButtons.clear();\n\n    // Stop observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n\n    // Remove styles\n    if (this.styles && this.styles.parentNode) {\n      this.styles.parentNode.removeChild(this.styles);\n      this.styles = null;\n    }\n  }\n\n  /**\n   * Remove button for specific textarea\n   */\n  removeButton(textareaId) {\n    const button = this.injectedButtons.get(textareaId);\n    if (button && button.parentNode) {\n      button.parentNode.removeChild(button);\n      this.injectedButtons.delete(textareaId);\n    }\n  }\n\n  /**\n   * Update button states based on connection status\n   */\n  updateButtonStates(connected) {\n    this.injectedButtons.forEach((button, textareaId) => {\n      this._updateButtonState(button, connected);\n    });\n  }\n\n  /**\n   * Update individual button state based on connection status\n   */\n  _updateButtonState(button, connected = null) {\n    // Button should be enabled if server is connected, regardless of desktop connection\n    // Desktop connection is only needed for roundtrip functionality\n    const serverConnected = connected !== null ? connected : this.webIdeBridge.isConnected();\n    button.disabled = !serverConnected;\n\n    // Always keep the original button text\n    button.textContent = button.dataset.originalText || 'Edit in IDE ↗';\n    if (serverConnected) {\n      button.title = '';\n    } else {\n      button.title = 'Web-IDE-Bridge server is not connected. Please connect first.';\n    }\n  }\n\n  // Private methods\n\n  /**\n   * Initialize CSS styles for buttons\n   */\n  _initializeStyles(style) {\n    if (this.styles || this.initialized) return;\n\n    const styleElement = document.createElement('style');\n    styleElement.id = 'web-ide-bridge-styles';\n\n    let css = '';\n\n    switch (style) {\n      case 'modern':\n        css = this._getModernButtonStyles();\n        break;\n      case 'minimal':\n        css = this._getMinimalButtonStyles();\n        break;\n      default:\n        css = this._getModernButtonStyles();\n    }\n\n    styleElement.textContent = css;\n    document.head.appendChild(styleElement);\n    this.styles = styleElement;\n    this.initialized = true;\n  }\n\n  /**\n   * Modern button styles matching the demo page\n   */\n  _getModernButtonStyles() {\n    return `\n      .web-ide-bridge-btn {\n        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\n        color: white;\n        border: none;\n        padding: 0.75rem 1.5rem;\n        border-radius: 8px;\n        font-weight: 600;\n        font-size: 0.875rem;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        display: inline-flex;\n        align-items: center;\n        gap: 0.5rem;\n        margin: 0.5rem 0;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        text-decoration: none;\n        outline: none;\n      }\n\n      .web-ide-bridge-btn:hover:not(:disabled) {\n        transform: translateY(-1px);\n        box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n      }\n\n      .web-ide-bridge-btn:active:not(:disabled) {\n        transform: translateY(0);\n      }\n\n      .web-ide-bridge-btn:disabled {\n        background: #9ca3af;\n        cursor: not-allowed;\n        transform: none;\n        box-shadow: none;\n      }\n\n      .web-ide-bridge-btn:focus {\n        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\n      }\n\n      .web-ide-bridge-container {\n        display: flex;\n        gap: 0.75rem;\n        align-items: center;\n        margin-top: 0.5rem;\n        flex-wrap: wrap;\n      }\n    `;\n  }\n\n  /**\n   * Minimal button styles\n   */\n  _getMinimalButtonStyles() {\n    return `\n      .web-ide-bridge-btn {\n        background: #4f46e5;\n        color: white;\n        border: 1px solid #4f46e5;\n        padding: 0.5rem 1rem;\n        border-radius: 4px;\n        font-size: 0.875rem;\n        cursor: pointer;\n        transition: background-color 0.2s ease;\n        font-family: inherit;\n        outline: none;\n      }\n\n      .web-ide-bridge-btn:hover:not(:disabled) {\n        background: #4338ca;\n      }\n\n      .web-ide-bridge-btn:disabled {\n        background: #9ca3af;\n        border-color: #9ca3af;\n        cursor: not-allowed;\n      }\n\n      .web-ide-bridge-btn:focus {\n        box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.5);\n      }\n\n      .web-ide-bridge-container {\n        margin-top: 0.5rem;\n      }\n\n      .web-ide-bridge-file-type {\n        margin-left: 0.5rem;\n        padding: 0.25rem 0.5rem;\n        border: 1px solid #ccc;\n        border-radius: 3px;\n        font-size: 0.8rem;\n      }\n    `;\n  }\n\n  /**\n   * Inject buttons for elements matching selector\n   */\n  _injectButtonsForSelector(config) {\n    let elements = document.querySelectorAll(config.selector);\n\n    // Filter by include/exclude selectors\n    elements = Array.from(elements).filter(element => {\n      if (config.excludeSelector && element.matches(config.excludeSelector)) {\n        return false;\n      }\n      if (config.includeOnlySelector && !element.matches(config.includeOnlySelector)) {\n        return false;\n      }\n      return true;\n    });\n\n    elements.forEach(textarea => {\n      if (!textarea.id) {\n        textarea.id = 'web-ide-bridge-textarea-' + generateUUID();\n      }\n\n      // Skip if button already exists\n      if (this.injectedButtons.has(textarea.id)) {\n        return;\n      }\n\n      // Additional check: look for existing buttons in the DOM\n      const existingButton = textarea.parentNode.querySelector(`[data-textarea-id=\"${textarea.id}\"]`);\n      if (existingButton) {\n        // Button exists in DOM but not in our tracking - add it to tracking\n        this.injectedButtons.set(textarea.id, existingButton);\n        return;\n      }\n\n      const fileType = textarea.getAttribute(config.fileTypeAttribute) || config.defaultFileType;\n\n      this._createAndInjectButton(textarea, {\n        ...config,\n        fileType\n      });\n    });\n  }\n\n  /**\n   * Create and inject button for textarea\n   */\n  _createAndInjectButton(textarea, config) {\n    const container = document.createElement('div');\n    container.className = 'web-ide-bridge-container';\n\n    const button = document.createElement('button');\n    button.className = config.buttonClass;\n    button.textContent = config.buttonText;\n    button.dataset.textareaId = textarea.id;\n    button.dataset.fileType = config.fileType;\n    button.dataset.originalText = config.buttonText;\n\n    // Set initial button state based on connection\n    this._updateButtonState(button);\n\n    // Button click handler\n    button.addEventListener('click', async () => {\n      if (!this.webIdeBridge.isConnected()) {\n        alert('Please connect to Web-IDE-Bridge server first');\n        return;\n      }\n\n      try {\n        const code = textarea.value;\n        const fileType = button.dataset.fileType;\n        await this.webIdeBridge.editCodeSnippet(textarea.id, code, fileType);\n      } catch (error) {\n        console.error('Failed to send code to IDE:', error);\n        alert('Failed to send code to IDE: ' + error.message);\n      }\n    });\n\n    container.appendChild(button);\n\n    // Position the container\n    switch (config.position) {\n      case 'before':\n        textarea.parentNode.insertBefore(container, textarea);\n        break;\n      case 'after':\n        textarea.parentNode.insertBefore(container, textarea.nextSibling);\n        break;\n      case 'append':\n        textarea.parentNode.appendChild(container);\n        break;\n      default:\n        textarea.parentNode.insertBefore(container, textarea.nextSibling);\n    }\n\n    this.injectedButtons.set(textarea.id, button);\n\n    // Register status callback only once for all buttons\n    if (!this.statusCallbackRegistered) {\n      this.webIdeBridge.onStatusChange((status) => {\n        this.updateButtonStates(status.serverConnected);\n      });\n      this.statusCallbackRegistered = true;\n    }\n\n    return button;\n  }\n\n  /**\n   * Watch for DOM changes to auto-inject buttons for new textareas\n   */\n  _watchForDOMChanges(config) {\n    const observer = new MutationObserver((mutations) => {\n      let shouldRefresh = false;\n\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          // Check if any added nodes contain textareas\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              if (node.matches && node.matches(config.selector)) {\n                shouldRefresh = true;\n              } else if (node.querySelector && node.querySelector(config.selector)) {\n                shouldRefresh = true;\n              }\n            }\n          });\n        }\n      });\n\n      if (shouldRefresh) {\n        // Debounce refresh to avoid excessive calls\n        setTimeout(() => {\n          this._injectButtonsForSelector(config);\n        }, 100);\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    this.observers.push(observer);\n  }\n}\n","import { generateUUID, validateServerUrl, debounce } from './utils.js';\nimport { UIManager } from './ui.js';\n\n// Version from webpack DefinePlugin\nconst VERSION = process.env.VERSION || '1.0.0';\n\n/**\n * Web-IDE-Bridge Client Library\n * Provides seamless integration between web applications and desktop IDEs\n */\nclass WebIdeBridge {\n  constructor(userId, options = {}) {\n    // Validate required parameters\n    if (!userId || typeof userId !== 'string') {\n      throw new Error('userId is required and must be a string');\n    }\n\n    // Configuration\n    this.userId = userId;\n    this.connectionId = options.connectionId || generateUUID(); // Allow custom connectionId\n    this.options = {\n      serverUrl: 'ws://localhost:8071/web-ide-bridge/ws',\n      autoReconnect: true,\n      reconnectInterval: 5000,\n      maxReconnectAttempts: 10,\n      heartbeatInterval: 30000,\n      connectionTimeout: 10000,\n      debug: false,\n      addButtons: true,\n      ...options\n    };\n\n    // Validate server URL\n    if (!validateServerUrl(this.options.serverUrl)) {\n      throw new Error('Invalid server URL format');\n    }\n\n    // Connection state\n    this.ws = null;\n    this.connected = false;\n    this.connecting = false;\n    this.desktopConnected = false;\n    this.reconnectAttempts = 0;\n    this.reconnectTimeout = null;\n    this.heartbeatTimeout = null;\n    this.connectionTimeout = null;\n\n    // Event handlers\n    this.statusCallbacks = [];\n    this.codeUpdateCallbacks = [];\n    this.errorCallbacks = [];\n    this.messageCallbacks = [];\n\n    // UI Manager for auto-injection features\n    this.uiManager = new UIManager(this);\n\n    // Debounced methods\n    this.debouncedReconnect = debounce(this._attemptReconnect.bind(this), 1000);\n\n    this._log('WebIdeBridge initialized', { userId, connectionId: this.connectionId });\n  }\n\n  /**\n   * Handle connection acknowledgment from server\n   */\n  _handleConnectionAck(message) {\n    this._log('Connection acknowledged by server');\n\n    // Now send browser connection message\n    const connectMessage = {\n      type: 'browser_connect',\n      connectionId: this.connectionId,\n      userId: this.userId,\n      timestamp: Date.now()\n    };\n\n    this._sendMessage(connectMessage);\n    this._startHeartbeat();\n  }\n\n  /**\n   * Connect to the Web-IDE-Bridge server\n   */\n  async connect() {\n    if (this.connected || this.connecting) {\n      this._log('Already connected or connecting');\n      return;\n    }\n\n    this.connecting = true;\n    this._updateStatus({\n      serverConnected: false,\n      desktopConnected: false\n    });\n\n    try {\n      await this._establishConnection();\n      this.reconnectAttempts = 0;\n      this._log('Successfully connected to server');\n    } catch (error) {\n      this.connecting = false;\n      this._handleConnectionError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from the server\n   */\n  disconnect() {\n    this._log('Disconnecting from server');\n\n    // Clear all timeouts\n    this._clearTimeouts();\n\n    // Disable auto-reconnect\n    this.options.autoReconnect = false;\n\n    // Close WebSocket connection\n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n    }\n\n    this.connected = false;\n    this.connecting = false;\n    this._updateStatus('disconnected');\n  }\n\n  /**\n   * Check if connected to server\n   */\n  isConnected() {\n    return this.connected;\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionState() {\n    return {\n      serverConnected: this.connected,\n      desktopConnected: this.desktopConnected\n    };\n  }\n\n  /**\n   * Send code snippet to IDE for editing\n   */\n  async editCodeSnippet(textareaId, code, fileType = 'txt') {\n    if (!this.connected) {\n      throw new Error('Not connected to server');\n    }\n\n    if (!textareaId || typeof textareaId !== 'string') {\n      throw new Error('textareaId is required and must be a string');\n    }\n\n    if (typeof code !== 'string') {\n      throw new Error('code must be a string');\n    }\n\n    const message = {\n      type: 'edit_request',\n      connectionId: this.connectionId,\n      userId: this.userId,\n      snippetId: textareaId,\n        code,\n        fileType: fileType || 'txt',\n        timestamp: Date.now()\n    };\n\n    this._log('Sending edit request', { textareaId, fileType });\n    this._sendMessage(message);\n\n    return textareaId;\n  }\n\n  /**\n   * Register callback for status changes\n   */\n  onStatusChange(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.statusCallbacks.push(callback);\n\n    // Immediately call with current status\n    const currentState = this.getConnectionState();\n    this._log('onStatusChange called immediately with state', currentState);\n    callback(currentState);\n  }\n\n  /**\n   * Register callback for code updates from IDE\n   */\n  onCodeUpdate(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.codeUpdateCallbacks.push(callback);\n  }\n\n  /**\n   * Register callback for errors\n   */\n  onError(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.errorCallbacks.push(callback);\n  }\n\n  /**\n   * Register callback for all messages (debugging)\n   */\n  onMessage(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.messageCallbacks.push(callback);\n  }\n\n  /**\n   * Auto-inject \"Edit in IDE\" buttons for textareas\n   */\n  autoInjectButtons(options = {}) {\n    return this.uiManager.autoInjectButtons(options);\n  }\n\n  /**\n   * Manually inject button for specific textarea\n   */\n  injectButton(textareaElement, options = {}) {\n    return this.uiManager.injectButton(textareaElement, options);\n  }\n\n  /**\n   * Remove all injected buttons\n   */\n  removeInjectedButtons() {\n    this.uiManager.removeAllButtons();\n  }\n\n  // Private methods\n\n  /**\n   * Establish WebSocket connection\n   */\n  async _establishConnection() {\n    return new Promise((resolve, reject) => {\n      try {\n        this._log('Establishing WebSocket connection', { url: this.options.serverUrl });\n\n        this.ws = new WebSocket(this.options.serverUrl);\n\n        // Set connection timeout\n        this.connectionTimeout = setTimeout(() => {\n          if (this.ws.readyState !== WebSocket.OPEN) {\n            this.ws.close();\n            reject(new Error('Connection timeout'));\n          }\n        }, this.options.connectionTimeout);\n\n        this.ws.onopen = () => {\n          clearTimeout(this.connectionTimeout);\n          this._log('WebSocket connection opened');\n          this._handleConnectionOpen();\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          this._handleMessage(event);\n        };\n\n        this.ws.onclose = (event) => {\n          this._handleConnectionClose(event);\n        };\n\n        this.ws.onerror = (error) => {\n          clearTimeout(this.connectionTimeout);\n          this._log('WebSocket error', error);\n          reject(new Error('WebSocket connection failed'));\n        };\n\n      } catch (error) {\n        clearTimeout(this.connectionTimeout);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Handle successful connection\n   */\n  _handleConnectionOpen() {\n    this.connected = true;\n    this.connecting = false;\n\n    // Update status first\n    this._updateStatus({\n      serverConnected: true,\n      desktopConnected: this.desktopConnected\n    });\n\n    // Send browser connection message with our connectionId\n    const connectMessage = {\n      type: 'browser_connect',\n      connectionId: this.connectionId,\n      userId: this.userId,\n      timestamp: Date.now()\n    };\n\n    setTimeout(() => { // Use setTimeout to ensure WebSocket is ready\n      try {\n        this._sendMessage(connectMessage);\n        this._startHeartbeat();\n        if (this.options.addButtons) { this.autoInjectButtons(); }\n      } catch (error) { this._log('Error in connection open handler', error); }\n    }, 0);\n  }\n\n  /**\n   * Handle connection close\n   */\n  _handleConnectionClose(event) {\n    this._log('WebSocket connection closed', { code: event.code, reason: event.reason });\n\n    this.connected = false;\n    this.connecting = false;\n    this._clearTimeouts();\n    this._updateStatus({\n      serverConnected: false,\n      desktopConnected: false\n    });\n\n    // Attempt reconnection if enabled\n    if (this.options.autoReconnect && event.code !== 1000) {\n      this._scheduleReconnect();\n    }\n  }\n\n  /**\n   * Handle connection errors\n   */\n  _handleConnectionError(error) {\n    this._log('Connection error', error);\n    this._triggerErrorCallbacks(error.message || 'Connection failed');\n\n    if (this.options.autoReconnect) {\n      this._scheduleReconnect();\n    }\n  }\n\n  /**\n   * Handle incoming WebSocket messages\n   */\n  _handleMessage(event) {\n    try {\n      const message = JSON.parse(event.data);\n\n      // For code_update messages, log a summary instead of full content\n      if (message.type === 'code_update' && message.code) {\n        this._log('Received code_update message', {\n          type: message.type,\n          snippetId: message.snippetId,\n          codeLength: message.code.length,\n          codePreview: message.code.length > 100 \n            ? `${message.code.substring(0, 100)}...${message.code.substring(message.code.length - 20)}`\n            : message.code\n        });\n      } else {\n        this._log('Received message', message);\n      }\n\n      // Trigger message callbacks\n      this.messageCallbacks.forEach(callback => {\n        try {\n          callback(message);\n        } catch (error) {\n          this._log('Error in message callback', error);\n        }\n      });\n\n      // Handle specific message types\n      switch (message.type) {\n        case 'connection_ack':\n          this._log('Connection acknowledged by server');\n          break;\n\n        case 'code_update':\n          this._handleCodeUpdate(message);\n          break;\n\n        case 'status_update':\n          this._handleStatusUpdate(message);\n          break;\n\n        case 'pong':\n          this._log('Received pong from server');\n          break;\n\n        case 'error':\n          this._handleServerError(message);\n          break;\n\n        default:\n          this._log('Unknown message type', message.type);\n      }\n\n    } catch (error) {\n      this._log('Error parsing message', error);\n      this._log('Raw message data', event.data);\n      this._triggerErrorCallbacks('Failed to parse server message: ' + error.message);\n    }\n  }\n\n  /**\n   * Handle code update from IDE\n   */\n  _handleCodeUpdate(message) {\n    if (!message.snippetId || !message.code) {\n      this._log('Invalid code update message - missing snippetId or code', message);\n      return;\n    }\n\n    const { snippetId, code } = message;\n    this._log('Received code update', { snippetId, codeLength: code.length });\n\n    // snippetId is the textareaId in the protocol\n    const textareaId = snippetId;\n\n    // Trigger code update callbacks\n    this.codeUpdateCallbacks.forEach(callback => {\n      try {\n        callback(textareaId, code);\n      } catch (error) {\n        this._log('Error in code update callback', error);\n      }\n    });\n  }\n\n  /**\n   * Handle status updates from server\n   */\n  _handleStatusUpdate(message) {\n    const desktopConnected = message.desktopConnected || false;\n    this._log('Status update from server', { desktopConnected });\n    this.desktopConnected = desktopConnected;\n    this._updateStatus({\n      serverConnected: this.connected,\n      desktopConnected: this.desktopConnected\n    });\n  }\n\n  /**\n   * Handle server error messages\n   */\n  _handleServerError(message) {\n    const errorMsg = message.payload?.message || 'Unknown server error';\n    this._log('Server error', errorMsg);\n    this._triggerErrorCallbacks(errorMsg);\n  }\n\n  /**\n   * Send message to server\n   */\n  _sendMessage(message) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      throw new Error('WebSocket not connected');\n    }\n\n    try {\n      this.ws.send(JSON.stringify(message));\n      this._log('Sent message', message);\n    } catch (error) {\n      this._log('Error sending message', error);\n      throw new Error('Failed to send message to server');\n    }\n  }\n\n  /**\n   * Start heartbeat mechanism\n   */\n  _startHeartbeat() {\n    this._clearHeartbeat();\n\n    if (this.options.heartbeatInterval > 0) {\n      this.heartbeatTimeout = setTimeout(() => {\n        if (this.connected) {\n          try {\n            this._sendMessage({\n              type: 'ping',\n              connectionId: this.connectionId,\n              timestamp: Date.now()\n            });\n            this._startHeartbeat(); // Schedule next heartbeat\n          } catch (error) {\n            this._log('Heartbeat failed', error);\n          }\n        }\n      }, this.options.heartbeatInterval);\n    }\n  }\n\n  /**\n   * Clear heartbeat timeout\n   */\n  _clearHeartbeat() {\n    if (this.heartbeatTimeout) {\n      clearTimeout(this.heartbeatTimeout);\n      this.heartbeatTimeout = null;\n    }\n  }\n\n  /**\n   * Schedule reconnection attempt\n   */\n  _scheduleReconnect() {\n    if (this.reconnectAttempts >= this.options.maxReconnectAttempts) {\n      this._log('Max reconnect attempts reached');\n      this._triggerErrorCallbacks('Max reconnection attempts exceeded');\n      return;\n    }\n\n    const delay = Math.min(\n      this.options.reconnectInterval * Math.pow(2, this.reconnectAttempts),\n      30000 // Max 30 seconds\n    );\n\n    this._log(`Scheduling reconnect attempt ${this.reconnectAttempts + 1} in ${delay}ms`);\n\n    this.reconnectTimeout = setTimeout(() => {\n      this.debouncedReconnect();\n    }, delay);\n  }\n\n  /**\n   * Attempt to reconnect\n   */\n  async _attemptReconnect() {\n    if (this.connected || this.connecting) {\n      return;\n    }\n\n    this.reconnectAttempts++;\n    this._log(`Reconnect attempt ${this.reconnectAttempts}`);\n\n    try {\n      await this.connect();\n    } catch (error) {\n      this._log('Reconnect failed', error);\n      if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n        this._scheduleReconnect();\n      }\n    }\n  }\n\n  /**\n   * Clear all timeouts\n   */\n  _clearTimeouts() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    if (this.connectionTimeout) {\n      clearTimeout(this.connectionTimeout);\n      this.connectionTimeout = null;\n    }\n\n    this._clearHeartbeat();\n  }\n\n  /**\n   * Update connection status and trigger callbacks\n   */\n  _updateStatus(status) {\n    this._log('Status changed to', status);\n\n    // Update internal state based on status\n    if (typeof status === 'string') {\n      // Legacy string status - update server connection\n      this.connected = status === 'connected';\n    } else if (typeof status === 'object') {\n      // New object status - update both server and desktop\n      this.connected = status.serverConnected || false;\n      this.desktopConnected = status.desktopConnected || false;\n    }\n\n    // Get current state and trigger callbacks\n    const currentState = this.getConnectionState();\n    this._log('Triggering status callbacks with state', currentState);\n    this.statusCallbacks.forEach(callback => {\n      try {\n        callback(currentState);\n      } catch (error) {\n        this._log('Error in status callback', error);\n      }\n    });\n  }\n\n  /**\n   * Trigger error callbacks\n   */\n  _triggerErrorCallbacks(error) {\n    this.errorCallbacks.forEach(callback => {\n      try {\n        callback(error);\n      } catch (error) {\n        this._log('Error in error callback', error);\n      }\n    });\n  }\n\n  /**\n   * Internal logging\n   */\n  _log(message, data = null) {\n    if (this.options.debug) {\n      const logMessage = `[WebIdeBridge] ${message}`;\n      if (data) {\n        // Handle large objects (like code_update messages)\n        if (typeof data === 'object' && data.code && data.code.length > 100) {\n          const shortenedData = {\n            ...data,\n            code: `${data.code.substring(0, 100)}...${data.code.substring(data.code.length - 20)} (${data.code.length} chars total)`\n          };\n          console.log(logMessage, shortenedData);\n        } else {\n          console.log(logMessage, data);\n        }\n      } else {\n        console.log(logMessage);\n      }\n    }\n  }\n}\n\nexport default WebIdeBridge;\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","generateUUID","replace","c","r","Math","random","toString","UIManager","constructor","webIdeBridge","this","injectedButtons","Map","observers","styles","initialized","statusCallbackRegistered","autoInjectButtons","options","config","selector","buttonText","buttonClass","position","fileTypeAttribute","defaultFileType","excludeSelector","includeOnlySelector","watchForChanges","style","showFileTypeSelector","_initializeStyles","_injectButtonsForSelector","_watchForDOMChanges","refresh","destroy","removeAllButtons","injectButton","textareaElement","tagName","Error","fileType","id","_createAndInjectButton","forEach","button","parentNode","removeChild","clear","observer","disconnect","removeButton","textareaId","delete","updateButtonStates","connected","_updateButtonState","serverConnected","isConnected","disabled","textContent","dataset","originalText","title","styleElement","document","createElement","css","_getModernButtonStyles","_getMinimalButtonStyles","head","appendChild","elements","querySelectorAll","Array","from","filter","element","matches","textarea","has","existingButton","querySelector","set","getAttribute","container","className","addEventListener","async","code","value","editCodeSnippet","error","alert","message","insertBefore","nextSibling","onStatusChange","status","MutationObserver","mutations","shouldRefresh","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","setTimeout","observe","body","childList","subtree","push","userId","connectionId","serverUrl","autoReconnect","reconnectInterval","maxReconnectAttempts","heartbeatInterval","connectionTimeout","debug","addButtons","url","urlObj","URL","protocol","validateServerUrl","ws","connecting","desktopConnected","reconnectAttempts","reconnectTimeout","heartbeatTimeout","statusCallbacks","codeUpdateCallbacks","errorCallbacks","messageCallbacks","uiManager","debouncedReconnect","func","wait","immediate","timeout","args","callNow","clearTimeout","later","apply","debounce","_attemptReconnect","bind","_log","_handleConnectionAck","connectMessage","timestamp","Date","now","_sendMessage","_startHeartbeat","connect","_updateStatus","_establishConnection","_handleConnectionError","_clearTimeouts","close","getConnectionState","snippetId","callback","currentState","onCodeUpdate","onError","onMessage","removeInjectedButtons","Promise","resolve","reject","WebSocket","readyState","OPEN","onopen","_handleConnectionOpen","onmessage","event","_handleMessage","onclose","_handleConnectionClose","onerror","reason","_scheduleReconnect","_triggerErrorCallbacks","JSON","parse","data","codeLength","length","codePreview","substring","_handleCodeUpdate","_handleStatusUpdate","_handleServerError","errorMsg","payload","send","stringify","_clearHeartbeat","delay","min","pow"],"sourceRoot":""}