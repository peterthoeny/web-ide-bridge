{"version":3,"file":"web-ide-bridge.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAsB,aAAID,IAE1BD,EAAmB,aAAIC,GACxB,CATD,CASGK,KAAM,I,mBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,KCO3E,SAASI,IACZ,MAAO,uCAAuCC,QAAQ,QAAS,SAASC,GACtE,MAAMC,EAAoB,GAAhBC,KAAKC,SAAgB,EAE/B,OADgB,MAANH,EAAYC,EAAS,EAAJA,EAAU,GAC5BG,SAAS,GACpB,EACF,C,uBCPK,MAAMC,EACXC,WAAAA,CAAYC,GACVvB,KAAKuB,aAAeA,EACpBvB,KAAKwB,gBAAkB,IAAIC,IAC3BzB,KAAK0B,UAAY,GACjB1B,KAAK2B,OAAS,KACd3B,KAAK4B,aAAc,CACrB,CAKAC,iBAAAA,CAAkBC,EAAU,CAAC,GAC3B,MAaMC,EAAS,CAZbC,SAAU,WACVC,WAAY,gBACZC,YAAa,qBACbC,SAAU,QACVC,kBAAmB,YACnBC,gBAAiB,MACjBC,gBAAiB,0BACjBC,oBAAqB,KACrBC,iBAAiB,EACjBC,MAAO,YAG8BX,GASvC,OAPA9B,KAAK0C,kBAAkBX,EAAOU,OAC9BzC,KAAK2C,0BAA0BZ,GAE3BA,EAAOS,iBACTxC,KAAK4C,oBAAoBb,GAGpB,CACLc,QAASA,IAAM7C,KAAK2C,0BAA0BZ,GAC9Ce,QAASA,IAAM9C,KAAK+C,mBAExB,CAKAC,YAAAA,CAAaC,EAAiBnB,EAAU,CAAC,GACvC,IAAKmB,GAA+C,aAA5BA,EAAgBC,QACtC,MAAM,IAAIC,MAAM,8BAGlB,MAQMpB,EAAS,CAPbE,WAAY,gBACZC,YAAa,qBACbC,SAAU,QACViB,SAAU,MACVX,MAAO,YAG8BX,GASvC,OAPA9B,KAAK0C,kBAAkBX,EAAOU,OAGzBQ,EAAgBI,KACnBJ,EAAgBI,GAAK,2BAA6BvC,KAG7Cd,KAAKsD,uBAAuBL,EAAiBlB,EACtD,CAKAgB,gBAAAA,GACE/C,KAAKwB,gBAAgB+B,QAAQC,IACvBA,EAAOC,YACTD,EAAOC,WAAWC,YAAYF,KAGlCxD,KAAKwB,gBAAgBmC,QAGrB3D,KAAK0B,UAAU6B,QAAQK,GAAYA,EAASC,cAC5C7D,KAAK0B,UAAY,GAGb1B,KAAK2B,QAAU3B,KAAK2B,OAAO8B,aAC7BzD,KAAK2B,OAAO8B,WAAWC,YAAY1D,KAAK2B,QACxC3B,KAAK2B,OAAS,KAElB,CAKAmC,YAAAA,CAAaC,GACX,MAAMP,EAASxD,KAAKwB,gBAAgBhB,IAAIuD,GACpCP,GAAUA,EAAOC,aACnBD,EAAOC,WAAWC,YAAYF,GAC9BxD,KAAKwB,gBAAgBwC,OAAOD,GAEhC,CAKAE,kBAAAA,CAAmBC,GACjBlE,KAAKwB,gBAAgB+B,QAAQC,IAC3BA,EAAOW,UAAYD,EACnBV,EAAOY,YAAcF,EACnBV,EAAOa,QAAQC,aACf,2BAEN,CAOA5B,iBAAAA,CAAkBD,GAChB,GAAIzC,KAAK2B,QAAU3B,KAAK4B,YAAa,OAErC,MAAM2C,EAAeC,SAASC,cAAc,SAC5CF,EAAalB,GAAK,wBAElB,IAAIqB,EAAM,GAEV,OAAQjC,GACN,IAAK,SAML,QACEiC,EAAM1E,KAAK2E,+BAJb,IAAK,UACHD,EAAM1E,KAAK4E,0BAMfL,EAAaH,YAAcM,EAC3BF,SAASK,KAAKC,YAAYP,GAC1BvE,KAAK2B,OAAS4C,EACdvE,KAAK4B,aAAc,CACrB,CAKA+C,sBAAAA,GACE,MAAO,0+CAyDT,CAKAC,uBAAAA,GACE,MAAO,m8BAwCT,CAKAjC,yBAAAA,CAA0BZ,GACxB,IAAIgD,EAAWP,SAASQ,iBAAiBjD,EAAOC,UAGhD+C,EAAWE,MAAMC,KAAKH,GAAUI,OAAOC,KACjCrD,EAAOO,kBAAmB8C,EAAQC,QAAQtD,EAAOO,qBAGjDP,EAAOQ,sBAAwB6C,EAAQC,QAAQtD,EAAOQ,uBAM5DwC,EAASxB,QAAQ+B,IAMf,GALKA,EAASjC,KACZiC,EAASjC,GAAK,2BAA6BvC,KAIzCd,KAAKwB,gBAAgB+D,IAAID,EAASjC,IACpC,OAGF,MAAMD,EAAWkC,EAASE,aAAazD,EAAOK,oBAAsBL,EAAOM,gBAE3ErC,KAAKsD,uBAAuBgC,EAAU,IACjCvD,EACHqB,cAGN,CAKAE,sBAAAA,CAAuBgC,EAAUvD,GAC/B,MAAM0D,EAAYjB,SAASC,cAAc,OACzCgB,EAAUC,UAAY,2BAEtB,MAAMlC,EAASgB,SAASC,cAAc,UACtCjB,EAAOkC,UAAY3D,EAAOG,YAC1BsB,EAAOY,YAAcrC,EAAOE,WAC5BuB,EAAOa,QAAQN,WAAauB,EAASjC,GACrCG,EAAOa,QAAQjB,SAAWrB,EAAOqB,SACjCI,EAAOa,QAAQC,aAAevC,EAAOE,WACrCuB,EAAOW,UAAYnE,KAAKuB,aAAaoE,cAGrC,MAAMC,EAAiBpB,SAASC,cAAc,UAC9CmB,EAAeF,UAAY,2BAC3BE,EAAeC,MAAQ9D,EAAOqB,SA8D9B,OA3DkB,CAChB,CAAEyC,MAAO,MAAOC,MAAO,eACvB,CAAED,MAAO,KAAMC,MAAO,oBACtB,CAAED,MAAO,KAAMC,MAAO,oBACtB,CAAED,MAAO,MAAOC,MAAO,oBACvB,CAAED,MAAO,MAAOC,MAAO,oBACvB,CAAED,MAAO,MAAOC,MAAO,cACvB,CAAED,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,MAAOC,MAAO,cACvB,CAAED,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,KAAMC,MAAO,gBACtB,CAAED,MAAO,OAAQC,MAAO,gBACxB,CAAED,MAAO,MAAOC,MAAO,cACvB,CAAED,MAAO,IAAKC,MAAO,UACrB,CAAED,MAAO,MAAOC,MAAO,cACvB,CAAED,MAAO,KAAMC,MAAO,cACtB,CAAED,MAAO,KAAMC,MAAO,YACtB,CAAED,MAAO,KAAMC,MAAO,cACtB,CAAED,MAAO,KAAMC,MAAO,eACtB,CAAED,MAAO,MAAOC,MAAO,cACvB,CAAED,MAAO,KAAMC,MAAO,mBAGdvC,QAAQwC,IAChB,MAAMC,EAASxB,SAASC,cAAc,UACtCuB,EAAOH,MAAQE,EAAKF,MACpBG,EAAO5B,YAAc2B,EAAKD,MAC1BF,EAAed,YAAYkB,KAI7BJ,EAAeK,iBAAiB,SAAU,KACxCzC,EAAOa,QAAQjB,SAAWwC,EAAeC,QAI3CrC,EAAOyC,iBAAiB,QAASC,UAC/B,GAAKlG,KAAKuB,aAAaoE,cAKvB,IACE,MAAMQ,EAAOb,EAASO,MAChBzC,EAAWI,EAAOa,QAAQjB,eAC1BpD,KAAKuB,aAAa6E,gBAAgBd,EAASjC,GAAI8C,EAAM/C,EAC7D,CAAE,MAAOiD,GAEPC,MAAM,+BAAiCD,EAAME,QAC/C,MAXED,MAAM,mDAcVb,EAAUX,YAAYtB,GACtBiC,EAAUX,YAAYc,GAGd7D,EAAOI,UACb,IAAK,SACHmD,EAAS7B,WAAW+C,aAAaf,EAAWH,GAC5C,MACF,IAAK,QAML,QACEA,EAAS7B,WAAW+C,aAAaf,EAAWH,EAASmB,mBAJvD,IAAK,SACHnB,EAAS7B,WAAWqB,YAAYW,GAapC,OAPAzF,KAAKwB,gBAAgBkF,IAAIpB,EAASjC,GAAIG,GAGtCxD,KAAKuB,aAAaoF,eAAgBC,IAChC5G,KAAKiE,mBAA8B,cAAX2C,KAGnBpD,CACT,CAKAZ,mBAAAA,CAAoBb,GAClB,MAAM6B,EAAW,IAAIiD,iBAAkBC,IACrC,IAAIC,GAAgB,EAEpBD,EAAUvD,QAASyD,IACK,cAAlBA,EAASjB,MAEXiB,EAASC,WAAW1D,QAAS2D,IACvBA,EAAKC,WAAaC,KAAKC,eACrBH,EAAK7B,SAAW6B,EAAK7B,QAAQtD,EAAOC,WAE7BkF,EAAKI,eAAiBJ,EAAKI,cAAcvF,EAAOC,aADzD+E,GAAgB,OAStBA,GAEFQ,WAAW,KACTvH,KAAK2C,0BAA0BZ,IAC9B,OAIP6B,EAAS4D,QAAQhD,SAASiD,KAAM,CAC9BC,WAAW,EACXC,SAAS,IAGX3H,KAAK0B,UAAUkG,KAAKhE,EACtB,ECqLF,QA9lBA,MACEtC,WAAAA,CAAYuG,EAAQ/F,EAAU,CAAC,GAE7B,IAAK+F,GAA4B,iBAAXA,EACpB,MAAM,IAAI1E,MAAM,2CAmBlB,GAfAnD,KAAK6H,OAASA,EACd7H,KAAK8H,aAAehG,EAAQgG,cAAgBhH,IAC5Cd,KAAK8B,QAAU,CACbiG,UAAW,wCACXC,eAAe,EACfC,kBAAmB,IACnBC,qBAAsB,GACtBC,kBAAmB,IACnBC,kBAAmB,IACnBC,OAAO,EACPC,YAAY,KACTxG,IFXA,SAA2ByG,GAChC,IAAKA,GAAsB,iBAARA,EACjB,OAAO,EAGT,IACE,MAAMC,EAAS,IAAIC,IAAIF,GACvB,MAA2B,QAApBC,EAAOE,UAA0C,SAApBF,EAAOE,QAC7C,CAAE,MACA,OAAO,CACT,CACF,CEIOC,CAAkB3I,KAAK8B,QAAQiG,WAClC,MAAM,IAAI5E,MAAM,6BAIlBnD,KAAK4I,GAAK,KACV5I,KAAKkE,WAAY,EACjBlE,KAAK6I,YAAa,EAClB7I,KAAK8I,kBAAmB,EACxB9I,KAAK+I,kBAAoB,EACzB/I,KAAKgJ,iBAAmB,KACxBhJ,KAAKiJ,iBAAmB,KACxBjJ,KAAKoI,kBAAoB,KAGzBpI,KAAKkJ,gBAAkB,GACvBlJ,KAAKmJ,oBAAsB,GAC3BnJ,KAAKoJ,eAAiB,GACtBpJ,KAAKqJ,iBAAmB,GAGxBrJ,KAAKsJ,UAAY,IAAIjI,EAAUrB,MAG/BA,KAAKuJ,mBFvBA,SAAkBC,EAAMC,EAAMC,GAAY,GAC/C,IAAIC,EAEJ,OAAO,YAA6BC,GAClC,MAKMC,EAAUH,IAAcC,EAC9BG,aAAaH,GACbA,EAAUpC,WAPIwC,KACZJ,EAAU,KACLD,GAAWF,EAAKQ,MAAMhK,KAAM4J,IAKPH,GAExBI,GAASL,EAAKQ,MAAMhK,KAAM4J,EAChC,CACF,CEQ4BK,CAASjK,KAAKkK,kBAAkBC,KAAKnK,MAAO,KAEtEA,KAAKoK,KAAK,2BAA4B,CAAEvC,SAAQC,aAAc9H,KAAK8H,cACrE,CAKAuC,oBAAAA,CAAqB9D,GACnBvG,KAAKoK,KAAK,qCAGV,MAAME,EAAiB,CACrBvE,KAAM,kBACN+B,aAAc9H,KAAK8H,aACnBD,OAAQ7H,KAAK6H,OACb0C,UAAWC,KAAKC,OAGlBzK,KAAK0K,aAAaJ,GAClBtK,KAAK2K,iBACP,CAKA,aAAMC,GACJ,GAAI5K,KAAKkE,WAAalE,KAAK6I,WACzB7I,KAAKoK,KAAK,uCADZ,CAKApK,KAAK6I,YAAa,EAClB7I,KAAK6K,cAAc,CACjBC,iBAAiB,EACjBhC,kBAAkB,IAGpB,UACQ9I,KAAK+K,uBACX/K,KAAK+I,kBAAoB,EACzB/I,KAAKoK,KAAK,mCACZ,CAAE,MAAO/D,GAGP,MAFArG,KAAK6I,YAAa,EAClB7I,KAAKgL,uBAAuB3E,GACtBA,CACR,CAhBA,CAiBF,CAKAxC,UAAAA,GACE7D,KAAKoK,KAAK,6BAGVpK,KAAKiL,iBAGLjL,KAAK8B,QAAQkG,eAAgB,EAGzBhI,KAAK4I,KACP5I,KAAK4I,GAAGsC,MAAM,IAAM,qBACpBlL,KAAK4I,GAAK,MAGZ5I,KAAKkE,WAAY,EACjBlE,KAAK6I,YAAa,EAClB7I,KAAK6K,cAAc,eACrB,CAKAlF,WAAAA,GACE,OAAO3F,KAAKkE,SACd,CAKAiH,kBAAAA,GACE,MAAO,CACLL,gBAAiB9K,KAAKkE,UACtB4E,iBAAkB9I,KAAK8I,iBAE3B,CAKA,qBAAM1C,CAAgBrC,EAAYoC,EAAM/C,EAAW,OACjD,IAAKpD,KAAKkE,UACR,MAAM,IAAIf,MAAM,2BAGlB,IAAKY,GAAoC,iBAAfA,EACxB,MAAM,IAAIZ,MAAM,+CAGlB,GAAoB,iBAATgD,EACT,MAAM,IAAIhD,MAAM,yBAGlB,MAAMiI,EAAYtK,IAEZyF,EAAU,CACdR,KAAM,eACN+B,aAAc9H,KAAK8H,aACnBD,OAAQ7H,KAAK6H,OACbuD,YACAC,QAAS,CACPtH,aACAoC,OACA/C,SAAUA,GAAY,MACtBmH,UAAWC,KAAKC,QAOpB,OAHAzK,KAAKoK,KAAK,uBAAwB,CAAErG,aAAYX,WAAUgI,cAC1DpL,KAAK0K,aAAanE,GAEX6E,CACT,CAKAzE,cAAAA,CAAe2E,GACb,GAAwB,mBAAbA,EACT,MAAM,IAAInI,MAAM,+BAElBnD,KAAKkJ,gBAAgBtB,KAAK0D,GAG1BA,EAAStL,KAAKmL,qBAChB,CAKAI,YAAAA,CAAaD,GACX,GAAwB,mBAAbA,EACT,MAAM,IAAInI,MAAM,+BAElBnD,KAAKmJ,oBAAoBvB,KAAK0D,EAChC,CAKAE,OAAAA,CAAQF,GACN,GAAwB,mBAAbA,EACT,MAAM,IAAInI,MAAM,+BAElBnD,KAAKoJ,eAAexB,KAAK0D,EAC3B,CAKAG,SAAAA,CAAUH,GACR,GAAwB,mBAAbA,EACT,MAAM,IAAInI,MAAM,+BAElBnD,KAAKqJ,iBAAiBzB,KAAK0D,EAC7B,CAKAzJ,iBAAAA,CAAkBC,EAAU,CAAC,GAC3B,OAAO9B,KAAKsJ,UAAUzH,kBAAkBC,EAC1C,CAKAkB,YAAAA,CAAaC,EAAiBnB,EAAU,CAAC,GACvC,OAAO9B,KAAKsJ,UAAUtG,aAAaC,EAAiBnB,EACtD,CAKA4J,qBAAAA,GACE1L,KAAKsJ,UAAUvG,kBACjB,CAOA,0BAAMgI,GACJ,OAAO,IAAIY,QAAQ,CAACC,EAASC,KAC3B,IACE7L,KAAKoK,KAAK,oCAAqC,CAAE7B,IAAKvI,KAAK8B,QAAQiG,YAEnE/H,KAAK4I,GAAK,IAAIkD,UAAU9L,KAAK8B,QAAQiG,WAGrC/H,KAAKoI,kBAAoBb,WAAW,KAC9BvH,KAAK4I,GAAGmD,aAAeD,UAAUE,OACnChM,KAAK4I,GAAGsC,QACRW,EAAO,IAAI1I,MAAM,yBAElBnD,KAAK8B,QAAQsG,mBAEhBpI,KAAK4I,GAAGqD,OAAS,KACfnC,aAAa9J,KAAKoI,mBAClBpI,KAAKoK,KAAK,+BACVpK,KAAKkM,wBACLN,KAGF5L,KAAK4I,GAAGuD,UAAaC,IACnBpM,KAAKqM,eAAeD,IAGtBpM,KAAK4I,GAAG0D,QAAWF,IACjBpM,KAAKuM,uBAAuBH,IAG9BpM,KAAK4I,GAAG4D,QAAWnG,IACjByD,aAAa9J,KAAKoI,mBAClBpI,KAAKoK,KAAK,kBAAmB/D,GAC7BwF,EAAO,IAAI1I,MAAM,gCAGrB,CAAE,MAAOkD,GACPyD,aAAa9J,KAAKoI,mBAClByD,EAAOxF,EACT,GAEJ,CAKA6F,qBAAAA,GACElM,KAAKkE,WAAY,EACjBlE,KAAK6I,YAAa,EAGlB,MAAMyB,EAAiB,CACrBvE,KAAM,kBACN+B,aAAc9H,KAAK8H,aACnBD,OAAQ7H,KAAK6H,OACb0C,UAAWC,KAAKC,OAGlBzK,KAAK0K,aAAaJ,GAClBtK,KAAK6K,cAAc,CACjBC,iBAAiB,EACjBhC,iBAAkB9I,KAAK8I,mBAEzB9I,KAAK2K,kBAGD3K,KAAK8B,QAAQwG,YACftI,KAAK6B,mBAET,CAKA0K,sBAAAA,CAAuBH,GACrBpM,KAAKoK,KAAK,8BAA+B,CAAEjE,KAAMiG,EAAMjG,KAAMsG,OAAQL,EAAMK,SAE3EzM,KAAKkE,WAAY,EACjBlE,KAAK6I,YAAa,EAClB7I,KAAKiL,iBACLjL,KAAK6K,cAAc,CACjBC,iBAAiB,EACjBhC,kBAAkB,IAIhB9I,KAAK8B,QAAQkG,eAAgC,MAAfoE,EAAMjG,MACtCnG,KAAK0M,oBAET,CAKA1B,sBAAAA,CAAuB3E,GACrBrG,KAAKoK,KAAK,mBAAoB/D,GAC9BrG,KAAK2M,uBAAuBtG,EAAME,SAAW,qBAEzCvG,KAAK8B,QAAQkG,eACfhI,KAAK0M,oBAET,CAKAL,cAAAA,CAAeD,GACb,IACE,MAAM7F,EAAUqG,KAAKC,MAAMT,EAAMU,MAajC,OAZA9M,KAAKoK,KAAK,mBAAoB7D,GAG9BvG,KAAKqJ,iBAAiB9F,QAAQ+H,IAC5B,IACEA,EAAS/E,EACX,CAAE,MAAOF,GACPrG,KAAKoK,KAAK,4BAA6B/D,EACzC,IAIME,EAAQR,MACd,IAAK,iBACH/F,KAAKoK,KAAK,qCACV,MAEF,IAAK,cACHpK,KAAK+M,kBAAkBxG,GACvB,MAEF,IAAK,gBACHvG,KAAKgN,oBAAoBzG,GACzB,MAEF,IAAK,OACHvG,KAAKoK,KAAK,6BACV,MAEF,IAAK,QACHpK,KAAKiN,mBAAmB1G,GACxB,MAEF,QACEvG,KAAKoK,KAAK,uBAAwB7D,EAAQR,MAGhD,CAAE,MAAOM,GACPrG,KAAKoK,KAAK,wBAAyB/D,GACnCrG,KAAKoK,KAAK,mBAAoBgC,EAAMU,MACpC9M,KAAK2M,uBAAuB,mCAAqCtG,EAAME,QACzE,CACF,CAKAwG,iBAAAA,CAAkBxG,GAChB,IAAKA,EAAQ8E,UAAY9E,EAAQ8E,QAAQtH,WAEvC,YADA/D,KAAKoK,KAAK,8BAA+B7D,GAI3C,MAAM,WAAExC,EAAU,KAAEoC,GAASI,EAAQ8E,QACrCrL,KAAKoK,KAAK,uBAAwB,CAAErG,aAAYmJ,WAAY/G,EAAKgH,SAGjEnN,KAAKmJ,oBAAoB5F,QAAQ+H,IAC/B,IACEA,EAASvH,EAAYoC,EACvB,CAAE,MAAOE,GACPrG,KAAKoK,KAAK,gCAAiC/D,EAC7C,GAEJ,CAKA2G,mBAAAA,CAAoBzG,GAClB,MAAMuC,EAAmBvC,EAAQuC,mBAAoB,EACrD9I,KAAKoK,KAAK,4BAA6B,CAAEtB,qBAEzC9I,KAAK8I,iBAAmBA,EACxB9I,KAAK6K,cAAc,CACjBC,gBAAiB9K,KAAKkE,UACtB4E,iBAAkB9I,KAAK8I,kBAE3B,CAKAmE,kBAAAA,CAAmB1G,GACjB,MAAM6G,EAAW7G,EAAQ8E,SAAS9E,SAAW,uBAC7CvG,KAAKoK,KAAK,eAAgBgD,GAC1BpN,KAAK2M,uBAAuBS,EAC9B,CAKA1C,YAAAA,CAAanE,GACX,IAAKvG,KAAK4I,IAAM5I,KAAK4I,GAAGmD,aAAeD,UAAUE,KAC/C,MAAM,IAAI7I,MAAM,2BAGlB,IACEnD,KAAK4I,GAAGyE,KAAKT,KAAKU,UAAU/G,IAC5BvG,KAAKoK,KAAK,eAAgB7D,EAC5B,CAAE,MAAOF,GAEP,MADArG,KAAKoK,KAAK,wBAAyB/D,GAC7B,IAAIlD,MAAM,mCAClB,CACF,CAKAwH,eAAAA,GACE3K,KAAKuN,kBAEDvN,KAAK8B,QAAQqG,kBAAoB,IACnCnI,KAAKiJ,iBAAmB1B,WAAW,KACjC,GAAIvH,KAAKkE,UACP,IACElE,KAAK0K,aAAa,CAChB3E,KAAM,OACN+B,aAAc9H,KAAK8H,aACnByC,UAAWC,KAAKC,QAElBzK,KAAK2K,iBACP,CAAE,MAAOtE,GACPrG,KAAKoK,KAAK,mBAAoB/D,EAChC,GAEDrG,KAAK8B,QAAQqG,mBAEpB,CAKAoF,eAAAA,GACMvN,KAAKiJ,mBACPa,aAAa9J,KAAKiJ,kBAClBjJ,KAAKiJ,iBAAmB,KAE5B,CAKAyD,kBAAAA,GACE,GAAI1M,KAAK+I,mBAAqB/I,KAAK8B,QAAQoG,qBAGzC,OAFAlI,KAAKoK,KAAK,uCACVpK,KAAK2M,uBAAuB,sCAI9B,MAAMa,EAAQtM,KAAKuM,IACjBzN,KAAK8B,QAAQmG,kBAAoB/G,KAAKwM,IAAI,EAAG1N,KAAK+I,mBAClD,KAGF/I,KAAKoK,KAAK,gCAAgCpK,KAAK+I,kBAAoB,QAAQyE,OAE3ExN,KAAKgJ,iBAAmBzB,WAAW,KACjCvH,KAAKuJ,sBACJiE,EACL,CAKA,uBAAMtD,GACJ,IAAIlK,KAAKkE,YAAalE,KAAK6I,WAA3B,CAIA7I,KAAK+I,oBACL/I,KAAKoK,KAAK,qBAAqBpK,KAAK+I,qBAEpC,UACQ/I,KAAK4K,SACb,CAAE,MAAOvE,GACPrG,KAAKoK,KAAK,mBAAoB/D,GAC1BrG,KAAK+I,kBAAoB/I,KAAK8B,QAAQoG,sBACxClI,KAAK0M,oBAET,CAZA,CAaF,CAKAzB,cAAAA,GACMjL,KAAKgJ,mBACPc,aAAa9J,KAAKgJ,kBAClBhJ,KAAKgJ,iBAAmB,MAGtBhJ,KAAKoI,oBACP0B,aAAa9J,KAAKoI,mBAClBpI,KAAKoI,kBAAoB,MAG3BpI,KAAKuN,iBACP,CAKA1C,aAAAA,CAAcjE,GACZ5G,KAAKoK,KAAK,oBAAqBxD,GAGT,iBAAXA,EAET5G,KAAKkE,UAAuB,cAAX0C,EACU,iBAAXA,IAEhB5G,KAAKkE,UAAY0C,EAAOkE,kBAAmB,EAC3C9K,KAAK8I,iBAAmBlC,EAAOkC,mBAAoB,GAIrD,MAAM6E,EAAe3N,KAAKmL,qBAC1BnL,KAAKkJ,gBAAgB3F,QAAQ+H,IAC3B,IACEA,EAASqC,EACX,CAAE,MAAOtH,GACPrG,KAAKoK,KAAK,2BAA4B/D,EACxC,GAEJ,CAKAsG,sBAAAA,CAAuBtG,GACrBrG,KAAKoJ,eAAe7F,QAAQ+H,IAC1B,IACEA,EAASjF,EACX,CAAE,MAAOA,GACPrG,KAAKoK,KAAK,0BAA2B/D,EACvC,GAEJ,CAKA+D,IAAAA,CAAK7D,EAASuG,EAAO,MACnB,GAAI9M,KAAK8B,QAAQuG,MAAO,CAOxB,CACF,G","sources":["webpack://WebIdeBridge/webpack/universalModuleDefinition","webpack://WebIdeBridge/webpack/bootstrap","webpack://WebIdeBridge/webpack/runtime/define property getters","webpack://WebIdeBridge/webpack/runtime/hasOwnProperty shorthand","webpack://WebIdeBridge/./src/utils.js","webpack://WebIdeBridge/./src/ui.js","webpack://WebIdeBridge/./src/client.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebIdeBridge\"] = factory();\n\telse\n\t\troot[\"WebIdeBridge\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Utility functions for Web-IDE-Bridge browser library\n */\n\n/**\n * Generate a UUID v4\n */\nexport function generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Validate WebSocket server URL\n   */\n  export function validateServerUrl(url) {\n    if (!url || typeof url !== 'string') {\n      return false;\n    }\n\n    try {\n      const urlObj = new URL(url);\n      return urlObj.protocol === 'ws:' || urlObj.protocol === 'wss:';\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Debounce function calls\n   */\n  export function debounce(func, wait, immediate = false) {\n    let timeout;\n\n    return function executedFunction(...args) {\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(this, args);\n      };\n\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n\n      if (callNow) func.apply(this, args);\n    };\n  }\n\n  /**\n   * Throttle function calls\n   */\n  export function throttle(func, limit) {\n    let inThrottle;\n\n    return function executedFunction(...args) {\n      if (!inThrottle) {\n        func.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  /**\n   * Deep clone an object\n   */\n  export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (obj instanceof Date) {\n      return new Date(obj.getTime());\n    }\n\n    if (obj instanceof Array) {\n      return obj.map(item => deepClone(item));\n    }\n\n    if (typeof obj === 'object') {\n      const clonedObj = {};\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          clonedObj[key] = deepClone(obj[key]);\n        }\n      }\n      return clonedObj;\n    }\n  }\n\n  /**\n   * Escape HTML entities\n   */\n  export function escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  /**\n   * Parse file type from filename or extension\n   */\n  export function parseFileType(filename) {\n    if (!filename || typeof filename !== 'string') {\n      return 'txt';\n    }\n\n    const extension = filename.split('.').pop().toLowerCase();\n\n    const typeMap = {\n      'js': 'js',\n      'jsx': 'jsx',\n      'ts': 'ts',\n      'tsx': 'tsx',\n      'css': 'css',\n      'scss': 'scss',\n      'sass': 'scss',\n      'less': 'less',\n      'html': 'html',\n      'htm': 'html',\n      'xml': 'xml',\n      'json': 'json',\n      'yaml': 'yaml',\n      'yml': 'yaml',\n      'py': 'py',\n      'python': 'py',\n      'java': 'java',\n      'cpp': 'cpp',\n      'cc': 'cpp',\n      'cxx': 'cpp',\n      'c': 'c',\n      'h': 'c',\n      'php': 'php',\n      'rb': 'rb',\n      'ruby': 'rb',\n      'go': 'go',\n      'rs': 'rs',\n      'rust': 'rs',\n      'sh': 'sh',\n      'bash': 'sh',\n      'zsh': 'sh',\n      'sql': 'sql',\n      'md': 'md',\n      'markdown': 'md',\n      'txt': 'txt',\n      'text': 'txt'\n    };\n\n    return typeMap[extension] || 'txt';\n  }\n\n  /**\n   * Format file size in human readable format\n   */\n  export function formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  }\n\n  /**\n   * Get language name from file type\n   */\n  export function getLanguageName(fileType) {\n    const languageMap = {\n      'js': 'JavaScript',\n      'jsx': 'React JSX',\n      'ts': 'TypeScript',\n      'tsx': 'React TSX',\n      'css': 'CSS',\n      'scss': 'SCSS',\n      'less': 'Less',\n      'html': 'HTML',\n      'xml': 'XML',\n      'json': 'JSON',\n      'yaml': 'YAML',\n      'py': 'Python',\n      'java': 'Java',\n      'cpp': 'C++',\n      'c': 'C',\n      'php': 'PHP',\n      'rb': 'Ruby',\n      'go': 'Go',\n      'rs': 'Rust',\n      'sh': 'Shell',\n      'sql': 'SQL',\n      'md': 'Markdown',\n      'txt': 'Plain Text'\n    };\n\n    return languageMap[fileType] || 'Unknown';\n  }\n\n  /**\n   * Check if the current environment supports WebSockets\n   */\n  export function isWebSocketSupported() {\n    return typeof WebSocket !== 'undefined';\n  }\n\n  /**\n   * Get browser information\n   */\n  export function getBrowserInfo() {\n    const userAgent = navigator.userAgent;\n    let browser = 'Unknown';\n    let version = 'Unknown';\n\n    if (userAgent.indexOf('Chrome') > -1) {\n      browser = 'Chrome';\n      version = userAgent.match(/Chrome\\/(\\d+)/)?.[1] || 'Unknown';\n    } else if (userAgent.indexOf('Firefox') > -1) {\n      browser = 'Firefox';\n      version = userAgent.match(/Firefox\\/(\\d+)/)?.[1] || 'Unknown';\n    } else if (userAgent.indexOf('Safari') > -1) {\n      browser = 'Safari';\n      version = userAgent.match(/Safari\\/(\\d+)/)?.[1] || 'Unknown';\n    } else if (userAgent.indexOf('Edge') > -1) {\n      browser = 'Edge';\n      version = userAgent.match(/Edge\\/(\\d+)/)?.[1] || 'Unknown';\n    }\n\n    return { browser, version, userAgent };\n  }\n\n  /**\n   * Simple localStorage wrapper with error handling\n   */\n  export const storage = {\n    get(key, defaultValue = null) {\n      try {\n        const item = localStorage.getItem(key);\n        return item ? JSON.parse(item) : defaultValue;\n      } catch {\n        return defaultValue;\n      }\n    },\n\n    set(key, value) {\n      try {\n        localStorage.setItem(key, JSON.stringify(value));\n        return true;\n      } catch {\n        return false;\n      }\n    },\n\n    remove(key) {\n      try {\n        localStorage.removeItem(key);\n        return true;\n      } catch {\n        return false;\n      }\n    },\n\n    clear() {\n      try {\n        localStorage.clear();\n        return true;\n      } catch {\n        return false;\n      }\n    }\n  };\n\n  /**\n   * Create a promise that resolves after a delay\n   */\n  export function delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Retry a function with exponential backoff\n   */\n  export async function retry(fn, options = {}) {\n    const {\n      retries = 3,\n      delay: baseDelay = 1000,\n      factor = 2,\n      maxDelay = 10000\n    } = options;\n\n    let lastError;\n\n    for (let i = 0; i <= retries; i++) {\n      try {\n        return await fn();\n      } catch (error) {\n        lastError = error;\n\n        if (i === retries) {\n          throw lastError;\n        }\n\n        const delayMs = Math.min(baseDelay * Math.pow(factor, i), maxDelay);\n        await delay(delayMs);\n      }\n    }\n  }\n\n  /**\n   * Check if a value is a valid UUID\n   */\n  export function isValidUUID(uuid) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  }\n\n  /**\n   * Safe JSON parse with error handling\n   */\n  export function safeJsonParse(jsonString, defaultValue = null) {\n    try {\n      return JSON.parse(jsonString);\n    } catch {\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Safe JSON stringify with error handling\n   */\n  export function safeJsonStringify(obj, defaultValue = '{}') {\n    try {\n      return JSON.stringify(obj);\n    } catch {\n      return defaultValue;\n    }\n  }\n\n  /**\n   * Create a cancellable promise\n   */\n  export function createCancellablePromise(promise) {\n    let cancelled = false;\n\n    const cancellablePromise = new Promise((resolve, reject) => {\n      promise.then(\n        value => cancelled ? reject(new Error('Promise cancelled')) : resolve(value),\n        error => cancelled ? reject(new Error('Promise cancelled')) : reject(error)\n      );\n    });\n\n    cancellablePromise.cancel = () => {\n      cancelled = true;\n    };\n\n    return cancellablePromise;\n  }\n","import { generateUUID } from './utils.js';\n\n/**\n * UI Manager for Web-IDE-Bridge\n * Handles automatic button injection and UI interactions\n */\nexport class UIManager {\n  constructor(webIdeBridge) {\n    this.webIdeBridge = webIdeBridge;\n    this.injectedButtons = new Map(); // textareaId -> button element\n    this.observers = [];\n    this.styles = null;\n    this.initialized = false;\n  }\n\n  /**\n   * Auto-inject \"Edit in IDE\" buttons for textareas\n   */\n  autoInjectButtons(options = {}) {\n    const defaultOptions = {\n      selector: 'textarea',\n      buttonText: 'Edit in IDE ↗',\n      buttonClass: 'web-ide-bridge-btn',\n      position: 'after', // 'after', 'before', 'append'\n      fileTypeAttribute: 'data-type',\n      defaultFileType: 'txt',\n      excludeSelector: '.web-ide-bridge-exclude',\n      includeOnlySelector: null,\n      watchForChanges: true,\n      style: 'modern' // 'modern', 'minimal', 'custom'\n    };\n\n    const config = { ...defaultOptions, ...options };\n\n    this._initializeStyles(config.style);\n    this._injectButtonsForSelector(config);\n\n    if (config.watchForChanges) {\n      this._watchForDOMChanges(config);\n    }\n\n    return {\n      refresh: () => this._injectButtonsForSelector(config),\n      destroy: () => this.removeAllButtons()\n    };\n  }\n\n  /**\n   * Manually inject button for specific textarea\n   */\n  injectButton(textareaElement, options = {}) {\n    if (!textareaElement || textareaElement.tagName !== 'TEXTAREA') {\n      throw new Error('Element must be a textarea');\n    }\n\n    const defaultOptions = {\n      buttonText: 'Edit in IDE ↗',\n      buttonClass: 'web-ide-bridge-btn',\n      position: 'after',\n      fileType: 'txt',\n      style: 'modern'\n    };\n\n    const config = { ...defaultOptions, ...options };\n\n    this._initializeStyles(config.style);\n\n    // Generate ID if textarea doesn't have one\n    if (!textareaElement.id) {\n      textareaElement.id = 'web-ide-bridge-textarea-' + generateUUID();\n    }\n\n    return this._createAndInjectButton(textareaElement, config);\n  }\n\n  /**\n   * Remove all injected buttons\n   */\n  removeAllButtons() {\n    this.injectedButtons.forEach(button => {\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n    });\n    this.injectedButtons.clear();\n\n    // Stop observers\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n\n    // Remove styles\n    if (this.styles && this.styles.parentNode) {\n      this.styles.parentNode.removeChild(this.styles);\n      this.styles = null;\n    }\n  }\n\n  /**\n   * Remove button for specific textarea\n   */\n  removeButton(textareaId) {\n    const button = this.injectedButtons.get(textareaId);\n    if (button && button.parentNode) {\n      button.parentNode.removeChild(button);\n      this.injectedButtons.delete(textareaId);\n    }\n  }\n\n  /**\n   * Update button states based on connection status\n   */\n  updateButtonStates(connected) {\n    this.injectedButtons.forEach(button => {\n      button.disabled = !connected;\n      button.textContent = connected ? \n        button.dataset.originalText : \n        'Connect to Server First';\n    });\n  }\n\n  // Private methods\n\n  /**\n   * Initialize CSS styles for buttons\n   */\n  _initializeStyles(style) {\n    if (this.styles || this.initialized) return;\n\n    const styleElement = document.createElement('style');\n    styleElement.id = 'web-ide-bridge-styles';\n\n    let css = '';\n\n    switch (style) {\n      case 'modern':\n        css = this._getModernButtonStyles();\n        break;\n      case 'minimal':\n        css = this._getMinimalButtonStyles();\n        break;\n      default:\n        css = this._getModernButtonStyles();\n    }\n\n    styleElement.textContent = css;\n    document.head.appendChild(styleElement);\n    this.styles = styleElement;\n    this.initialized = true;\n  }\n\n  /**\n   * Modern button styles matching the demo page\n   */\n  _getModernButtonStyles() {\n    return `\n      .web-ide-bridge-btn {\n        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\n        color: white;\n        border: none;\n        padding: 0.75rem 1.5rem;\n        border-radius: 8px;\n        font-weight: 600;\n        font-size: 0.875rem;\n        cursor: pointer;\n        transition: all 0.3s ease;\n        display: inline-flex;\n        align-items: center;\n        gap: 0.5rem;\n        margin: 0.5rem 0;\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        text-decoration: none;\n        outline: none;\n      }\n\n      .web-ide-bridge-btn:hover:not(:disabled) {\n        transform: translateY(-1px);\n        box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n      }\n\n      .web-ide-bridge-btn:active:not(:disabled) {\n        transform: translateY(0);\n      }\n\n      .web-ide-bridge-btn:disabled {\n        background: #9ca3af;\n        cursor: not-allowed;\n        transform: none;\n        box-shadow: none;\n      }\n\n      .web-ide-bridge-btn:focus {\n        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\n      }\n\n      .web-ide-bridge-container {\n        display: flex;\n        gap: 0.75rem;\n        align-items: center;\n        margin-top: 0.5rem;\n        flex-wrap: wrap;\n      }\n\n      .web-ide-bridge-file-type {\n        padding: 0.5rem;\n        border: 1px solid #d1d5db;\n        border-radius: 6px;\n        font-size: 0.875rem;\n        background: white;\n        color: #374151;\n      }\n    `;\n  }\n\n  /**\n   * Minimal button styles\n   */\n  _getMinimalButtonStyles() {\n    return `\n      .web-ide-bridge-btn {\n        background: #4f46e5;\n        color: white;\n        border: 1px solid #4f46e5;\n        padding: 0.5rem 1rem;\n        border-radius: 4px;\n        font-size: 0.875rem;\n        cursor: pointer;\n        transition: background-color 0.2s ease;\n        font-family: inherit;\n        outline: none;\n      }\n\n      .web-ide-bridge-btn:hover:not(:disabled) {\n        background: #4338ca;\n      }\n\n      .web-ide-bridge-btn:disabled {\n        background: #9ca3af;\n        border-color: #9ca3af;\n        cursor: not-allowed;\n      }\n\n      .web-ide-bridge-btn:focus {\n        box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.5);\n      }\n\n      .web-ide-bridge-container {\n        margin-top: 0.5rem;\n      }\n\n      .web-ide-bridge-file-type {\n        margin-left: 0.5rem;\n        padding: 0.25rem 0.5rem;\n        border: 1px solid #ccc;\n        border-radius: 3px;\n        font-size: 0.8rem;\n      }\n    `;\n  }\n\n  /**\n   * Inject buttons for elements matching selector\n   */\n  _injectButtonsForSelector(config) {\n    let elements = document.querySelectorAll(config.selector);\n\n    // Filter by include/exclude selectors\n    elements = Array.from(elements).filter(element => {\n      if (config.excludeSelector && element.matches(config.excludeSelector)) {\n        return false;\n      }\n      if (config.includeOnlySelector && !element.matches(config.includeOnlySelector)) {\n        return false;\n      }\n      return true;\n    });\n\n    elements.forEach(textarea => {\n      if (!textarea.id) {\n        textarea.id = 'web-ide-bridge-textarea-' + generateUUID();\n      }\n\n      // Skip if button already exists\n      if (this.injectedButtons.has(textarea.id)) {\n        return;\n      }\n\n      const fileType = textarea.getAttribute(config.fileTypeAttribute) || config.defaultFileType;\n\n      this._createAndInjectButton(textarea, {\n        ...config,\n        fileType\n      });\n    });\n  }\n\n  /**\n   * Create and inject button for textarea\n   */\n  _createAndInjectButton(textarea, config) {\n    const container = document.createElement('div');\n    container.className = 'web-ide-bridge-container';\n\n    const button = document.createElement('button');\n    button.className = config.buttonClass;\n    button.textContent = config.buttonText;\n    button.dataset.textareaId = textarea.id;\n    button.dataset.fileType = config.fileType;\n    button.dataset.originalText = config.buttonText;\n    button.disabled = !this.webIdeBridge.isConnected();\n\n    // File type selector\n    const fileTypeSelect = document.createElement('select');\n    fileTypeSelect.className = 'web-ide-bridge-file-type';\n    fileTypeSelect.value = config.fileType;\n\n    // Common file types\n    const fileTypes = [\n      { value: 'txt', label: 'Text (.txt)' },\n      { value: 'js', label: 'JavaScript (.js)' },\n      { value: 'ts', label: 'TypeScript (.ts)' },\n      { value: 'jsx', label: 'React JSX (.jsx)' },\n      { value: 'tsx', label: 'React TSX (.tsx)' },\n      { value: 'css', label: 'CSS (.css)' },\n      { value: 'scss', label: 'SCSS (.scss)' },\n      { value: 'less', label: 'Less (.less)' },\n      { value: 'html', label: 'HTML (.html)' },\n      { value: 'xml', label: 'XML (.xml)' },\n      { value: 'json', label: 'JSON (.json)' },\n      { value: 'yaml', label: 'YAML (.yaml)' },\n      { value: 'py', label: 'Python (.py)' },\n      { value: 'java', label: 'Java (.java)' },\n      { value: 'cpp', label: 'C++ (.cpp)' },\n      { value: 'c', label: 'C (.c)' },\n      { value: 'php', label: 'PHP (.php)' },\n      { value: 'rb', label: 'Ruby (.rb)' },\n      { value: 'go', label: 'Go (.go)' },\n      { value: 'rs', label: 'Rust (.rs)' },\n      { value: 'sh', label: 'Shell (.sh)' },\n      { value: 'sql', label: 'SQL (.sql)' },\n      { value: 'md', label: 'Markdown (.md)' }\n    ];\n\n    fileTypes.forEach(type => {\n      const option = document.createElement('option');\n      option.value = type.value;\n      option.textContent = type.label;\n      fileTypeSelect.appendChild(option);\n    });\n\n    // Update button file type when selector changes\n    fileTypeSelect.addEventListener('change', () => {\n      button.dataset.fileType = fileTypeSelect.value;\n    });\n\n    // Button click handler\n    button.addEventListener('click', async () => {\n      if (!this.webIdeBridge.isConnected()) {\n        alert('Please connect to Web-IDE-Bridge server first');\n        return;\n      }\n\n      try {\n        const code = textarea.value;\n        const fileType = button.dataset.fileType;\n        await this.webIdeBridge.editCodeSnippet(textarea.id, code, fileType);\n      } catch (error) {\n        console.error('Failed to send code to IDE:', error);\n        alert('Failed to send code to IDE: ' + error.message);\n      }\n    });\n\n    container.appendChild(button);\n    container.appendChild(fileTypeSelect);\n\n    // Position the container\n    switch (config.position) {\n      case 'before':\n        textarea.parentNode.insertBefore(container, textarea);\n        break;\n      case 'after':\n        textarea.parentNode.insertBefore(container, textarea.nextSibling);\n        break;\n      case 'append':\n        textarea.parentNode.appendChild(container);\n        break;\n      default:\n        textarea.parentNode.insertBefore(container, textarea.nextSibling);\n    }\n\n    this.injectedButtons.set(textarea.id, button);\n\n    // Update button state based on connection\n    this.webIdeBridge.onStatusChange((status) => {\n      this.updateButtonStates(status === 'connected');\n    });\n\n    return button;\n  }\n\n  /**\n   * Watch for DOM changes to auto-inject buttons for new textareas\n   */\n  _watchForDOMChanges(config) {\n    const observer = new MutationObserver((mutations) => {\n      let shouldRefresh = false;\n\n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          // Check if any added nodes contain textareas\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              if (node.matches && node.matches(config.selector)) {\n                shouldRefresh = true;\n              } else if (node.querySelector && node.querySelector(config.selector)) {\n                shouldRefresh = true;\n              }\n            }\n          });\n        }\n      });\n\n      if (shouldRefresh) {\n        // Debounce refresh to avoid excessive calls\n        setTimeout(() => {\n          this._injectButtonsForSelector(config);\n        }, 100);\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n\n    this.observers.push(observer);\n  }\n}\n","import { generateUUID, validateServerUrl, debounce } from './utils.js';\nimport { UIManager } from './ui.js';\n\n// Version from webpack DefinePlugin\nconst VERSION = process.env.VERSION || '1.0.0';\n\n/**\n * Web-IDE-Bridge Client Library\n * Provides seamless integration between web applications and desktop IDEs\n */\nclass WebIdeBridge {\n  constructor(userId, options = {}) {\n    // Validate required parameters\n    if (!userId || typeof userId !== 'string') {\n      throw new Error('userId is required and must be a string');\n    }\n\n    // Configuration\n    this.userId = userId;\n    this.connectionId = options.connectionId || generateUUID(); // Allow custom connectionId\n    this.options = {\n      serverUrl: 'ws://localhost:8071/web-ide-bridge/ws',\n      autoReconnect: true,\n      reconnectInterval: 5000,\n      maxReconnectAttempts: 10,\n      heartbeatInterval: 30000,\n      connectionTimeout: 10000,\n      debug: false,\n      addButtons: true,\n      ...options\n    };\n\n    // Validate server URL\n    if (!validateServerUrl(this.options.serverUrl)) {\n      throw new Error('Invalid server URL format');\n    }\n\n    // Connection state\n    this.ws = null;\n    this.connected = false;\n    this.connecting = false;\n    this.desktopConnected = false;\n    this.reconnectAttempts = 0;\n    this.reconnectTimeout = null;\n    this.heartbeatTimeout = null;\n    this.connectionTimeout = null;\n\n    // Event handlers\n    this.statusCallbacks = [];\n    this.codeUpdateCallbacks = [];\n    this.errorCallbacks = [];\n    this.messageCallbacks = [];\n\n    // UI Manager for auto-injection features\n    this.uiManager = new UIManager(this);\n\n    // Debounced methods\n    this.debouncedReconnect = debounce(this._attemptReconnect.bind(this), 1000);\n\n    this._log('WebIdeBridge initialized', { userId, connectionId: this.connectionId });\n  }\n\n  /**\n   * Handle connection acknowledgment from server\n   */\n  _handleConnectionAck(message) {\n    this._log('Connection acknowledged by server');\n\n    // Now send browser connection message\n    const connectMessage = {\n      type: 'browser_connect',\n      connectionId: this.connectionId,\n      userId: this.userId,\n      timestamp: Date.now()\n    };\n\n    this._sendMessage(connectMessage);\n    this._startHeartbeat();\n  }\n\n  /**\n   * Connect to the Web-IDE-Bridge server\n   */\n  async connect() {\n    if (this.connected || this.connecting) {\n      this._log('Already connected or connecting');\n      return;\n    }\n\n    this.connecting = true;\n    this._updateStatus({\n      serverConnected: false,\n      desktopConnected: false\n    });\n\n    try {\n      await this._establishConnection();\n      this.reconnectAttempts = 0;\n      this._log('Successfully connected to server');\n    } catch (error) {\n      this.connecting = false;\n      this._handleConnectionError(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Disconnect from the server\n   */\n  disconnect() {\n    this._log('Disconnecting from server');\n\n    // Clear all timeouts\n    this._clearTimeouts();\n\n    // Disable auto-reconnect\n    this.options.autoReconnect = false;\n\n    // Close WebSocket connection\n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = null;\n    }\n\n    this.connected = false;\n    this.connecting = false;\n    this._updateStatus('disconnected');\n  }\n\n  /**\n   * Check if connected to server\n   */\n  isConnected() {\n    return this.connected;\n  }\n\n  /**\n   * Get current connection status\n   */\n  getConnectionState() {\n    return {\n      serverConnected: this.connected,\n      desktopConnected: this.desktopConnected\n    };\n  }\n\n  /**\n   * Send code snippet to IDE for editing\n   */\n  async editCodeSnippet(textareaId, code, fileType = 'txt') {\n    if (!this.connected) {\n      throw new Error('Not connected to server');\n    }\n\n    if (!textareaId || typeof textareaId !== 'string') {\n      throw new Error('textareaId is required and must be a string');\n    }\n\n    if (typeof code !== 'string') {\n      throw new Error('code must be a string');\n    }\n\n    const sessionId = generateUUID();\n\n    const message = {\n      type: 'edit_request',\n      connectionId: this.connectionId,\n      userId: this.userId,\n      sessionId,\n      payload: {\n        textareaId,\n        code,\n        fileType: fileType || 'txt',\n        timestamp: Date.now()\n      }\n    };\n\n    this._log('Sending edit request', { textareaId, fileType, sessionId });\n    this._sendMessage(message);\n\n    return sessionId;\n  }\n\n  /**\n   * Register callback for status changes\n   */\n  onStatusChange(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.statusCallbacks.push(callback);\n\n    // Immediately call with current status\n    callback(this.getConnectionState());\n  }\n\n  /**\n   * Register callback for code updates from IDE\n   */\n  onCodeUpdate(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.codeUpdateCallbacks.push(callback);\n  }\n\n  /**\n   * Register callback for errors\n   */\n  onError(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.errorCallbacks.push(callback);\n  }\n\n  /**\n   * Register callback for all messages (debugging)\n   */\n  onMessage(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    this.messageCallbacks.push(callback);\n  }\n\n  /**\n   * Auto-inject \"Edit in IDE\" buttons for textareas\n   */\n  autoInjectButtons(options = {}) {\n    return this.uiManager.autoInjectButtons(options);\n  }\n\n  /**\n   * Manually inject button for specific textarea\n   */\n  injectButton(textareaElement, options = {}) {\n    return this.uiManager.injectButton(textareaElement, options);\n  }\n\n  /**\n   * Remove all injected buttons\n   */\n  removeInjectedButtons() {\n    this.uiManager.removeAllButtons();\n  }\n\n  // Private methods\n\n  /**\n   * Establish WebSocket connection\n   */\n  async _establishConnection() {\n    return new Promise((resolve, reject) => {\n      try {\n        this._log('Establishing WebSocket connection', { url: this.options.serverUrl });\n\n        this.ws = new WebSocket(this.options.serverUrl);\n\n        // Set connection timeout\n        this.connectionTimeout = setTimeout(() => {\n          if (this.ws.readyState !== WebSocket.OPEN) {\n            this.ws.close();\n            reject(new Error('Connection timeout'));\n          }\n        }, this.options.connectionTimeout);\n\n        this.ws.onopen = () => {\n          clearTimeout(this.connectionTimeout);\n          this._log('WebSocket connection opened');\n          this._handleConnectionOpen();\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          this._handleMessage(event);\n        };\n\n        this.ws.onclose = (event) => {\n          this._handleConnectionClose(event);\n        };\n\n        this.ws.onerror = (error) => {\n          clearTimeout(this.connectionTimeout);\n          this._log('WebSocket error', error);\n          reject(new Error('WebSocket connection failed'));\n        };\n\n      } catch (error) {\n        clearTimeout(this.connectionTimeout);\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Handle successful connection\n   */\n  _handleConnectionOpen() {\n    this.connected = true;\n    this.connecting = false;\n\n    // Send browser connection message with our connectionId\n    const connectMessage = {\n      type: 'browser_connect',\n      connectionId: this.connectionId,\n      userId: this.userId,\n      timestamp: Date.now()\n    };\n\n    this._sendMessage(connectMessage);\n    this._updateStatus({\n      serverConnected: true,\n      desktopConnected: this.desktopConnected\n    });\n    this._startHeartbeat();\n\n    // Auto-inject buttons if enabled\n    if (this.options.addButtons) {\n      this.autoInjectButtons();\n    }\n  }\n\n  /**\n   * Handle connection close\n   */\n  _handleConnectionClose(event) {\n    this._log('WebSocket connection closed', { code: event.code, reason: event.reason });\n\n    this.connected = false;\n    this.connecting = false;\n    this._clearTimeouts();\n    this._updateStatus({\n      serverConnected: false,\n      desktopConnected: false\n    });\n\n    // Attempt reconnection if enabled\n    if (this.options.autoReconnect && event.code !== 1000) {\n      this._scheduleReconnect();\n    }\n  }\n\n  /**\n   * Handle connection errors\n   */\n  _handleConnectionError(error) {\n    this._log('Connection error', error);\n    this._triggerErrorCallbacks(error.message || 'Connection failed');\n\n    if (this.options.autoReconnect) {\n      this._scheduleReconnect();\n    }\n  }\n\n  /**\n   * Handle incoming WebSocket messages\n   */\n  _handleMessage(event) {\n    try {\n      const message = JSON.parse(event.data);\n      this._log('Received message', message);\n\n      // Trigger message callbacks\n      this.messageCallbacks.forEach(callback => {\n        try {\n          callback(message);\n        } catch (error) {\n          this._log('Error in message callback', error);\n        }\n      });\n\n      // Handle specific message types\n      switch (message.type) {\n        case 'connection_ack':\n          this._log('Connection acknowledged by server');\n          break;\n\n        case 'code_update':\n          this._handleCodeUpdate(message);\n          break;\n\n        case 'status_update':\n          this._handleStatusUpdate(message);\n          break;\n\n        case 'pong':\n          this._log('Received pong from server');\n          break;\n\n        case 'error':\n          this._handleServerError(message);\n          break;\n\n        default:\n          this._log('Unknown message type', message.type);\n      }\n\n    } catch (error) {\n      this._log('Error parsing message', error);\n      this._log('Raw message data', event.data);\n      this._triggerErrorCallbacks('Failed to parse server message: ' + error.message);\n    }\n  }\n\n  /**\n   * Handle code update from IDE\n   */\n  _handleCodeUpdate(message) {\n    if (!message.payload || !message.payload.textareaId) {\n      this._log('Invalid code update message', message);\n      return;\n    }\n\n    const { textareaId, code } = message.payload;\n    this._log('Received code update', { textareaId, codeLength: code.length });\n\n    // Trigger code update callbacks\n    this.codeUpdateCallbacks.forEach(callback => {\n      try {\n        callback(textareaId, code);\n      } catch (error) {\n        this._log('Error in code update callback', error);\n      }\n    });\n  }\n\n  /**\n   * Handle status updates from server\n   */\n  _handleStatusUpdate(message) {\n    const desktopConnected = message.desktopConnected || false;\n    this._log('Status update from server', { desktopConnected });\n    \n    this.desktopConnected = desktopConnected;\n    this._updateStatus({\n      serverConnected: this.connected,\n      desktopConnected: this.desktopConnected\n    });\n  }\n\n  /**\n   * Handle server error messages\n   */\n  _handleServerError(message) {\n    const errorMsg = message.payload?.message || 'Unknown server error';\n    this._log('Server error', errorMsg);\n    this._triggerErrorCallbacks(errorMsg);\n  }\n\n  /**\n   * Send message to server\n   */\n  _sendMessage(message) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      throw new Error('WebSocket not connected');\n    }\n\n    try {\n      this.ws.send(JSON.stringify(message));\n      this._log('Sent message', message);\n    } catch (error) {\n      this._log('Error sending message', error);\n      throw new Error('Failed to send message to server');\n    }\n  }\n\n  /**\n   * Start heartbeat mechanism\n   */\n  _startHeartbeat() {\n    this._clearHeartbeat();\n\n    if (this.options.heartbeatInterval > 0) {\n      this.heartbeatTimeout = setTimeout(() => {\n        if (this.connected) {\n          try {\n            this._sendMessage({\n              type: 'ping',\n              connectionId: this.connectionId,\n              timestamp: Date.now()\n            });\n            this._startHeartbeat(); // Schedule next heartbeat\n          } catch (error) {\n            this._log('Heartbeat failed', error);\n          }\n        }\n      }, this.options.heartbeatInterval);\n    }\n  }\n\n  /**\n   * Clear heartbeat timeout\n   */\n  _clearHeartbeat() {\n    if (this.heartbeatTimeout) {\n      clearTimeout(this.heartbeatTimeout);\n      this.heartbeatTimeout = null;\n    }\n  }\n\n  /**\n   * Schedule reconnection attempt\n   */\n  _scheduleReconnect() {\n    if (this.reconnectAttempts >= this.options.maxReconnectAttempts) {\n      this._log('Max reconnect attempts reached');\n      this._triggerErrorCallbacks('Max reconnection attempts exceeded');\n      return;\n    }\n\n    const delay = Math.min(\n      this.options.reconnectInterval * Math.pow(2, this.reconnectAttempts),\n      30000 // Max 30 seconds\n    );\n\n    this._log(`Scheduling reconnect attempt ${this.reconnectAttempts + 1} in ${delay}ms`);\n\n    this.reconnectTimeout = setTimeout(() => {\n      this.debouncedReconnect();\n    }, delay);\n  }\n\n  /**\n   * Attempt to reconnect\n   */\n  async _attemptReconnect() {\n    if (this.connected || this.connecting) {\n      return;\n    }\n\n    this.reconnectAttempts++;\n    this._log(`Reconnect attempt ${this.reconnectAttempts}`);\n\n    try {\n      await this.connect();\n    } catch (error) {\n      this._log('Reconnect failed', error);\n      if (this.reconnectAttempts < this.options.maxReconnectAttempts) {\n        this._scheduleReconnect();\n      }\n    }\n  }\n\n  /**\n   * Clear all timeouts\n   */\n  _clearTimeouts() {\n    if (this.reconnectTimeout) {\n      clearTimeout(this.reconnectTimeout);\n      this.reconnectTimeout = null;\n    }\n\n    if (this.connectionTimeout) {\n      clearTimeout(this.connectionTimeout);\n      this.connectionTimeout = null;\n    }\n\n    this._clearHeartbeat();\n  }\n\n  /**\n   * Update connection status and trigger callbacks\n   */\n  _updateStatus(status) {\n    this._log('Status changed to', status);\n\n    // Update internal state based on status\n    if (typeof status === 'string') {\n      // Legacy string status - update server connection\n      this.connected = status === 'connected';\n    } else if (typeof status === 'object') {\n      // New object status - update both server and desktop\n      this.connected = status.serverConnected || false;\n      this.desktopConnected = status.desktopConnected || false;\n    }\n\n    // Get current state and trigger callbacks\n    const currentState = this.getConnectionState();\n    this.statusCallbacks.forEach(callback => {\n      try {\n        callback(currentState);\n      } catch (error) {\n        this._log('Error in status callback', error);\n      }\n    });\n  }\n\n  /**\n   * Trigger error callbacks\n   */\n  _triggerErrorCallbacks(error) {\n    this.errorCallbacks.forEach(callback => {\n      try {\n        callback(error);\n      } catch (error) {\n        this._log('Error in error callback', error);\n      }\n    });\n  }\n\n  /**\n   * Internal logging\n   */\n  _log(message, data = null) {\n    if (this.options.debug) {\n      const logMessage = `[WebIdeBridge] ${message}`;\n      if (data) {\n        console.log(logMessage, data);\n      } else {\n        console.log(logMessage);\n      }\n    }\n  }\n}\n\nexport default WebIdeBridge;\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","generateUUID","replace","c","r","Math","random","toString","UIManager","constructor","webIdeBridge","injectedButtons","Map","observers","styles","initialized","autoInjectButtons","options","config","selector","buttonText","buttonClass","position","fileTypeAttribute","defaultFileType","excludeSelector","includeOnlySelector","watchForChanges","style","_initializeStyles","_injectButtonsForSelector","_watchForDOMChanges","refresh","destroy","removeAllButtons","injectButton","textareaElement","tagName","Error","fileType","id","_createAndInjectButton","forEach","button","parentNode","removeChild","clear","observer","disconnect","removeButton","textareaId","delete","updateButtonStates","connected","disabled","textContent","dataset","originalText","styleElement","document","createElement","css","_getModernButtonStyles","_getMinimalButtonStyles","head","appendChild","elements","querySelectorAll","Array","from","filter","element","matches","textarea","has","getAttribute","container","className","isConnected","fileTypeSelect","value","label","type","option","addEventListener","async","code","editCodeSnippet","error","alert","message","insertBefore","nextSibling","set","onStatusChange","status","MutationObserver","mutations","shouldRefresh","mutation","addedNodes","node","nodeType","Node","ELEMENT_NODE","querySelector","setTimeout","observe","body","childList","subtree","push","userId","connectionId","serverUrl","autoReconnect","reconnectInterval","maxReconnectAttempts","heartbeatInterval","connectionTimeout","debug","addButtons","url","urlObj","URL","protocol","validateServerUrl","ws","connecting","desktopConnected","reconnectAttempts","reconnectTimeout","heartbeatTimeout","statusCallbacks","codeUpdateCallbacks","errorCallbacks","messageCallbacks","uiManager","debouncedReconnect","func","wait","immediate","timeout","args","callNow","clearTimeout","later","apply","debounce","_attemptReconnect","bind","_log","_handleConnectionAck","connectMessage","timestamp","Date","now","_sendMessage","_startHeartbeat","connect","_updateStatus","serverConnected","_establishConnection","_handleConnectionError","_clearTimeouts","close","getConnectionState","sessionId","payload","callback","onCodeUpdate","onError","onMessage","removeInjectedButtons","Promise","resolve","reject","WebSocket","readyState","OPEN","onopen","_handleConnectionOpen","onmessage","event","_handleMessage","onclose","_handleConnectionClose","onerror","reason","_scheduleReconnect","_triggerErrorCallbacks","JSON","parse","data","_handleCodeUpdate","_handleStatusUpdate","_handleServerError","codeLength","length","errorMsg","send","stringify","_clearHeartbeat","delay","min","pow","currentState"],"sourceRoot":""}