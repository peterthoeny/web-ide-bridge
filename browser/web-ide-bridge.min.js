!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).WebIdeBridge=t()}(this,function(){"use strict";function e(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}class t{constructor(e){this.webIdeBridge=e,this.injectedButtons=new Map,this.observers=[],this.styles=null,this.initialized=!1}autoInjectButtons(e={}){const t={selector:"textarea",buttonText:"Edit in IDE ↗",buttonClass:"web-ide-bridge-btn",position:"after",fileTypeAttribute:"data-language",defaultFileType:"txt",excludeSelector:".web-ide-bridge-exclude",includeOnlySelector:null,watchForChanges:!0,style:"modern",...e};return this._initializeStyles(t.style),this._injectButtonsForSelector(t),t.watchForChanges&&this._watchForDOMChanges(t),{refresh:()=>this._injectButtonsForSelector(t),destroy:()=>this.removeAllButtons()}}injectButton(t,n={}){if(!t||"TEXTAREA"!==t.tagName)throw new Error("Element must be a textarea");const o={buttonText:"Edit in IDE ↗",buttonClass:"web-ide-bridge-btn",position:"after",fileType:"txt",style:"modern",...n};return this._initializeStyles(o.style),t.id||(t.id="web-ide-bridge-textarea-"+e()),this._createAndInjectButton(t,o)}removeAllButtons(){this.injectedButtons.forEach(e=>{e.parentNode&&e.parentNode.removeChild(e)}),this.injectedButtons.clear(),this.observers.forEach(e=>e.disconnect()),this.observers=[],this.styles&&this.styles.parentNode&&(this.styles.parentNode.removeChild(this.styles),this.styles=null)}updateButtonStates(e){this.injectedButtons.forEach(t=>{t.disabled=!e,t.textContent=t.dataset.originalText})}_initializeStyles(e){if(this.styles||this.initialized)return;const t=document.createElement("style");t.id="web-ide-bridge-styles";let n="";switch(e){case"modern":default:n=this._getModernButtonStyles();break;case"minimal":n=this._getMinimalButtonStyles()}t.textContent=n,document.head.appendChild(t),this.styles=t,this.initialized=!0}_getModernButtonStyles(){return"\n        .web-ide-bridge-btn {\n          background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);\n          color: white;\n          border: none;\n          padding: 0.75rem 1.5rem;\n          border-radius: 8px;\n          font-weight: 600;\n          font-size: 0.875rem;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          display: inline-flex;\n          align-items: center;\n          gap: 0.5rem;\n          margin: 0.5rem 0;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n          text-decoration: none;\n          outline: none;\n        }\n\n        .web-ide-bridge-btn:hover:not(:disabled) {\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n        }\n\n        .web-ide-bridge-btn:active:not(:disabled) {\n          transform: translateY(0);\n        }\n\n        .web-ide-bridge-btn:disabled {\n          background: #9ca3af;\n          cursor: not-allowed;\n          transform: none;\n          box-shadow: none;\n        }\n\n        .web-ide-bridge-btn:focus {\n          box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);\n        }\n\n        .web-ide-bridge-container {\n          display: flex;\n          gap: 0.75rem;\n          align-items: center;\n          margin-top: 0.5rem;\n          flex-wrap: wrap;\n        }\n\n        .web-ide-bridge-file-type {\n          padding: 0.5rem;\n          border: 1px solid #d1d5db;\n          border-radius: 6px;\n          font-size: 0.875rem;\n          background: white;\n          color: #374151;\n        }\n      "}_getMinimalButtonStyles(){return"\n        .web-ide-bridge-btn {\n          background: #4f46e5;\n          color: white;\n          border: 1px solid #4f46e5;\n          padding: 0.5rem 1rem;\n          border-radius: 4px;\n          font-size: 0.875rem;\n          cursor: pointer;\n          transition: background-color 0.2s ease;\n          font-family: inherit;\n          outline: none;\n        }\n\n        .web-ide-bridge-btn:hover:not(:disabled) {\n          background: #4338ca;\n        }\n\n        .web-ide-bridge-btn:disabled {\n          background: #9ca3af;\n          border-color: #9ca3af;\n          cursor: not-allowed;\n        }\n\n        .web-ide-bridge-btn:focus {\n          box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.5);\n        }\n\n        .web-ide-bridge-container {\n          margin-top: 0.5rem;\n        }\n\n        .web-ide-bridge-file-type {\n          margin-left: 0.5rem;\n          padding: 0.25rem 0.5rem;\n          border: 1px solid #ccc;\n          border-radius: 3px;\n          font-size: 0.8rem;\n        }\n      "}_injectButtonsForSelector(t){let n=document.querySelectorAll(t.selector);n=Array.from(n).filter(e=>(!t.excludeSelector||!e.matches(t.excludeSelector))&&!(t.includeOnlySelector&&!e.matches(t.includeOnlySelector))),n.forEach(n=>{if(n.id||(n.id="web-ide-bridge-textarea-"+e()),this.injectedButtons.has(n.id))return;const o=n.getAttribute(t.fileTypeAttribute)||t.defaultFileType;this._createAndInjectButton(n,{...t,fileType:o})})}_createAndInjectButton(e,t){const n=document.createElement("div");n.className="web-ide-bridge-container";const o=document.createElement("button");switch(o.className=t.buttonClass,o.textContent=t.buttonText,o.dataset.textareaId=e.id,o.dataset.fileType=t.fileType,o.dataset.originalText=t.buttonText,o.disabled=!this.webIdeBridge.isConnected(),o.addEventListener("click",async()=>{if(this.webIdeBridge.isConnected())try{const t=e.value,n=o.dataset.fileType;await this.webIdeBridge.editCodeSnippet(e.id,t,n)}catch(e){console.error("Failed to send code to IDE:",e),alert("Failed to send code to IDE: "+e.message)}else alert("Please connect to Web-IDE-Bridge server first")}),n.appendChild(o),t.position){case"before":e.parentNode.insertBefore(n,e);break;case"after":default:e.parentNode.insertBefore(n,e.nextSibling);break;case"append":e.parentNode.appendChild(n)}return this.injectedButtons.set(e.id,o),this.webIdeBridge.onStatusChange(e=>{this.updateButtonStates(e.serverConnected)}),o}_watchForDOMChanges(e){const t=new MutationObserver(t=>{let n=!1;t.forEach(t=>{"childList"===t.type&&t.addedNodes.forEach(t=>{t.nodeType===Node.ELEMENT_NODE&&(t.matches&&t.matches(e.selector)||t.querySelector&&t.querySelector(e.selector))&&(n=!0)})}),n&&setTimeout(()=>{this._injectButtonsForSelector(e)},100)});t.observe(document.body,{childList:!0,subtree:!0}),this.observers.push(t)}}return class{constructor(n,o={}){if(!n||"string"!=typeof n)throw new Error("userId is required and must be a string");if(this.userId=n,this.connectionId=o.connectionId||e(),this.options={serverUrl:"ws://localhost:8071/web-ide-bridge/ws",autoReconnect:!0,reconnectInterval:5e3,maxReconnectAttempts:10,heartbeatInterval:3e4,connectionTimeout:1e4,debug:!1,addButtons:!0,...o},!function(e){if(!e||"string"!=typeof e)return!1;try{const t=new URL(e);return"ws:"===t.protocol||"wss:"===t.protocol}catch{return!1}}(this.options.serverUrl))throw new Error("Invalid server URL format");this.ws=null,this.connected=!1,this.connecting=!1,this.reconnectAttempts=0,this.reconnectTimeout=null,this.heartbeatTimeout=null,this.connectionTimeout=null,this.desktopConnected=!1,this.statusCallbacks=[],this.codeUpdateCallbacks=[],this.errorCallbacks=[],this.messageCallbacks=[],this.uiManager=new t(this),this.options.addButtons&&this.uiManager.autoInjectButtons(),this.debouncedReconnect=function(e,t,n=!1){let o;return function(...s){const i=n&&!o;clearTimeout(o),o=setTimeout(()=>{o=null,n||e.apply(this,s)},t),i&&e.apply(this,s)}}(this._attemptReconnect.bind(this),1e3),this._log("WebIdeBridge initialized",{userId:n,connectionId:this.connectionId})}async connect(){if(this.connected||this.connecting)this._log("Already connected or connecting");else{this.connecting=!0,this._updateStatus();try{await this._establishConnection(),this.reconnectAttempts=0,this._log("Successfully connected to server")}catch(e){throw this.connecting=!1,this._handleConnectionError(e),e}}}disconnect(){this._log("Disconnecting from server"),this._clearTimeouts(),this.options.autoReconnect=!1,this.ws&&(this.ws.close(1e3,"Client disconnect"),this.ws=null),this.connected=!1,this.connecting=!1,this._updateStatus()}isConnected(){return this.connected}getConnectionState(){return this.connected?"connected":this.connecting?"connecting":"disconnected"}async editCodeSnippet(e,t,n="txt"){if(!this.connected)throw new Error("Not connected to server");if(!e||"string"!=typeof e)throw new Error("snippetId is required and must be a string");if("string"!=typeof t)throw new Error("code must be a string");const o={type:"edit_request",connectionId:this.connectionId,userId:this.userId,snippetId:e,code:t,fileType:n||"txt",timestamp:Date.now()};return this._log("Sending edit request",{snippetId:e,fileType:n}),this._sendMessage(o),!1===this.options.addButtons&&this._sendMessage({type:"info",connectionId:this.connectionId,userId:this.userId,payload:{snippetId:e,message:"code has been updated in the web application"}}),e}onStatusChange(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.statusCallbacks.push(e),e({serverConnected:this.connected,desktopConnected:this.desktopConnected})}onCodeUpdate(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.codeUpdateCallbacks.push(e)}onError(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.errorCallbacks.push(e)}onMessage(e){if("function"!=typeof e)throw new Error("Callback must be a function");this.messageCallbacks.push(e)}autoInjectButtons(e={}){return this.uiManager.autoInjectButtons(e)}injectButton(e,t={}){return this.uiManager.injectButton(e,t)}async _establishConnection(){return new Promise((e,t)=>{try{this._log("Establishing WebSocket connection",{url:this.options.serverUrl}),this.ws=new WebSocket(this.options.serverUrl),this.connectionTimeout=setTimeout(()=>{this.ws.readyState!==WebSocket.OPEN&&(this.ws.close(),t(new Error("Connection timeout")))},this.options.connectionTimeout),this.ws.onopen=()=>{clearTimeout(this.connectionTimeout),this._log("WebSocket connection opened"),this._handleConnectionOpen(),e()},this.ws.onmessage=e=>{this._handleMessage(e)},this.ws.onclose=e=>{this._handleConnectionClose(e)},this.ws.onerror=e=>{clearTimeout(this.connectionTimeout),this._log("WebSocket error",e),t(new Error("WebSocket connection failed"))}}catch(e){clearTimeout(this.connectionTimeout),t(e)}})}_handleConnectionOpen(){this.connected=!0,this.connecting=!1,this._updateStatus();const e={type:"browser_connect",connectionId:this.connectionId,userId:this.userId,timestamp:Date.now()};this._sendMessage(e),this._startHeartbeat()}_handleConnectionClose(e){this._log("WebSocket connection closed",{code:e.code,reason:e.reason}),this.connected=!1,this.connecting=!1,this._clearTimeouts(),this._updateStatus(),this.options.autoReconnect&&1e3!==e.code&&this._scheduleReconnect()}_handleConnectionError(e){this._log("Connection error",e),this._triggerErrorCallbacks(e.message||"Connection failed"),this.options.autoReconnect&&this._scheduleReconnect()}_handleMessage(e){try{const t=JSON.parse(e.data);switch(this._log("Received message",t),this.messageCallbacks.forEach(e=>{try{e(t)}catch(e){this._log("Error in message callback",e)}}),t.type){case"connection_init":this._handleConnectionInit(t);break;case"connection_ack":this._log("Connection acknowledged by server");break;case"code_update":this._handleCodeUpdate(t);break;case"pong":this._log("Received pong from server");break;case"error":this._handleServerError(t);break;case"status_update":this._handleStatusUpdate(t);break;default:this._log("Unknown message type",t.type)}}catch(t){this._log("Error parsing message",t),this._log("Raw message data",e.data),this._triggerErrorCallbacks("Failed to parse server message: "+t.message)}}_handleConnectionInit(e){e.connectionId&&(this.connectionId=e.connectionId,this._log("Connection ID updated from server",this.connectionId),this._startHeartbeat())}_handleCodeUpdate(e){if(!e.snippetId||!e.code)return void this._log("Invalid code update message",e);const{snippetId:t,code:n}=e;this._log("Received code update",{snippetId:t,codeLength:n.length}),this._log("Number of code update callbacks:",this.codeUpdateCallbacks.length);let o=!1;this.codeUpdateCallbacks.forEach(e=>{try{o=!0;const s=e(t,n);this._log("Callback result:",{result:s,type:typeof s,hasContent:s?.trim()}),"string"==typeof s&&s.trim()&&(this._log("Sending info message from callback result"),this._sendMessage({type:"info",connectionId:this.connectionId,userId:this.userId,payload:{snippetId:t,message:s.trim()}}))}catch(e){this._log("Error in code update callback",e)}}),o||this._log("No callbacks executed for snippet:",t),!1!==this.options.addButtons&&(this._log("Sending default info message (addButtons mode)"),this._sendMessage({type:"info",connectionId:this.connectionId,userId:this.userId,payload:{snippetId:t,message:"code has been updated in the web application"}}))}_handleServerError(e){const t=e.payload?.message||"Unknown server error";this._log("Server error",t),this._triggerErrorCallbacks(t)}_handleStatusUpdate(e){"boolean"==typeof e.desktopConnected&&(this.desktopConnected=e.desktopConnected,this._updateStatus())}_sendMessage(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)throw new Error("WebSocket not connected");try{this.ws.send(JSON.stringify(e)),this._log("Sent message",e)}catch(e){throw this._log("Error sending message",e),new Error("Failed to send message to server")}}_startHeartbeat(){this._clearHeartbeat(),this.options.heartbeatInterval>0&&(this.heartbeatTimeout=setTimeout(()=>{if(this.connected)try{this._sendMessage({type:"ping",connectionId:this.connectionId,timestamp:Date.now()}),this._startHeartbeat()}catch(e){this._log("Heartbeat failed",e)}},this.options.heartbeatInterval))}_clearHeartbeat(){this.heartbeatTimeout&&(clearTimeout(this.heartbeatTimeout),this.heartbeatTimeout=null)}_scheduleReconnect(){if(this.reconnectAttempts>=this.options.maxReconnectAttempts)return this._log("Max reconnect attempts reached"),void this._triggerErrorCallbacks("Max reconnection attempts exceeded");const e=Math.min(this.options.reconnectInterval*Math.pow(2,this.reconnectAttempts),3e4);this._log(`Scheduling reconnect attempt ${this.reconnectAttempts+1} in ${e}ms`),this.reconnectTimeout=setTimeout(()=>{this.debouncedReconnect()},e)}async _attemptReconnect(){if(!this.connected&&!this.connecting){this.reconnectAttempts++,this._log(`Reconnect attempt ${this.reconnectAttempts}`);try{await this.connect()}catch(e){this._log("Reconnect failed",e),this.reconnectAttempts<this.options.maxReconnectAttempts&&this._scheduleReconnect()}}}_clearTimeouts(){this.reconnectTimeout&&(clearTimeout(this.reconnectTimeout),this.reconnectTimeout=null),this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this._clearHeartbeat()}_updateStatus(){this.statusCallbacks.forEach(e=>{try{e({serverConnected:this.connected,desktopConnected:this.desktopConnected})}catch(e){this._log("Error in status callback",e)}})}_triggerErrorCallbacks(e){this.errorCallbacks.forEach(t=>{try{t(e)}catch(e){this._log("Error in error callback",e)}})}_log(e,t=null){if(this.options.debug){const n=`[WebIdeBridge] ${e}`;t?console.log(n,t):console.log(n)}}}});